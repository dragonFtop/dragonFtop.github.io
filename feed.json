{
    "version": "https://jsonfeed.org/version/1",
    "title": "天行健，君子以自强不息",
    "subtitle": "",
    "icon": "https://dragonftop.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "https://dragonFtop.github.io",
    "items": [
        {
            "id": "https://dragonftop.github.io/2025/06/18/%E5%88%B7%E9%A2%98/",
            "url": "https://dragonftop.github.io/2025/06/18/%E5%88%B7%E9%A2%98/",
            "title": "",
            "date_published": "2025-06-18T09:56:52.328Z",
            "content_html": "<h1 id=\"栈与队列\"><a class=\"anchor\" href=\"#栈与队列\">#</a> 栈与队列</h1>\n<h2 id=\"1-括号匹配\"><a class=\"anchor\" href=\"#1-括号匹配\">#</a> 1: 括号匹配</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-02-14.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义栈结构体</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span>* base;</span><br><span class=\"line\">    <span class=\"type\">char</span>* top;</span><br><span class=\"line\">    <span class=\"type\">int</span> size;</span><br><span class=\"line\">&#125; <span class=\"built_in\">stack</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化栈</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">initstack</span><span class=\"params\">(<span class=\"built_in\">stack</span>&amp; S)</span> &#123;</span><br><span class=\"line\">    S.base = new <span class=\"type\">char</span>[<span class=\"number\">100</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!S.base) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    S.top = S.base;</span><br><span class=\"line\">    S.size = <span class=\"number\">100</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 入栈操作</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">push</span><span class=\"params\">(<span class=\"built_in\">stack</span>&amp; S, <span class=\"type\">char</span> ch)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (S.top - S.base == S.size) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *S.top++ = ch;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 出栈操作</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">pop</span><span class=\"params\">(<span class=\"built_in\">stack</span>&amp; S)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (S.top != S.base) &#123;</span><br><span class=\"line\">        --S.top;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取栈顶元素</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"title function_\">gettop</span><span class=\"params\">(<span class=\"built_in\">stack</span>&amp; S)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (S.top != S.base) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *(S.top - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;\\0&#x27;</span>; <span class=\"comment\">// 栈为空时返回空字符</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 释放栈内存</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">destroyStack</span><span class=\"params\">(<span class=\"built_in\">stack</span>&amp; S)</span> &#123;</span><br><span class=\"line\">    delete[] S.base;</span><br><span class=\"line\">    S.base = nullptr;</span><br><span class=\"line\">    S.top = nullptr;</span><br><span class=\"line\">    S.size = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 括号匹配检查函数</span></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">matching</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> str[<span class=\"number\">1000</span>];</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cin</span> &gt;&gt; str;</span><br><span class=\"line\">    <span class=\"built_in\">stack</span> S;</span><br><span class=\"line\">    initstack(S);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">strlen</span>(str); ++i) &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> ch = str[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">&#x27;(&#x27;</span>) &#123;</span><br><span class=\"line\">            push(S, ch);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch == <span class=\"string\">&#x27;)&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (gettop(S) == <span class=\"string\">&#x27;(&#x27;</span>) &#123;</span><br><span class=\"line\">                pop(S);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                destroyStack(S);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">bool</span> result = (S.top == S.base);</span><br><span class=\"line\">    destroyStack(S);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">bool</span> res;</span><br><span class=\"line\">    res = matching();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;Yes&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;No&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-回文链表\"><a class=\"anchor\" href=\"#2-回文链表\">#</a> 2: 回文链表</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-04-23.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义栈结构体</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span>* base;</span><br><span class=\"line\">    <span class=\"type\">char</span>* top;</span><br><span class=\"line\">    <span class=\"type\">int</span> size;</span><br><span class=\"line\">&#125; <span class=\"built_in\">stack</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化栈</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">initstack</span><span class=\"params\">(<span class=\"built_in\">stack</span>&amp; S)</span> &#123;</span><br><span class=\"line\">    S.base = new <span class=\"type\">char</span>[<span class=\"number\">1001</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!S.base) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    S.top = S.base;</span><br><span class=\"line\">    S.size = <span class=\"number\">1001</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">push</span><span class=\"params\">(<span class=\"built_in\">stack</span>&amp; S, <span class=\"type\">char</span> ch)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (S.top - S.base == S.size) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *S.top++ = ch;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"title function_\">pop</span><span class=\"params\">(<span class=\"built_in\">stack</span>&amp; S)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (S.top != S.base) &#123;</span><br><span class=\"line\">        ch=*--S.top;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ch;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"title function_\">gettop</span><span class=\"params\">(<span class=\"built_in\">stack</span>&amp; S)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (S.top != S.base) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *(S.top - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;\\0&#x27;</span>; <span class=\"comment\">// 栈为空时返回空字符</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">destroyStack</span><span class=\"params\">(<span class=\"built_in\">stack</span>&amp; S)</span> &#123;</span><br><span class=\"line\">    delete[] S.base;</span><br><span class=\"line\">    S.base = nullptr;</span><br><span class=\"line\">    S.top = nullptr;</span><br><span class=\"line\">    S.size = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判定回文字符串</span></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">Huiwen</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> str[<span class=\"number\">1001</span>];</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; str;</span><br><span class=\"line\">    <span class=\"built_in\">stack</span> S;</span><br><span class=\"line\">    initstack(S);</span><br><span class=\"line\">    <span class=\"type\">bool</span> flag=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> len = <span class=\"built_in\">strlen</span>(str);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; (len / <span class=\"number\">2</span>); ++i) &#123;</span><br><span class=\"line\">        push(S, str[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = (len +<span class=\"number\">1</span>) / <span class=\"number\">2</span> ; i &lt; len ; ++i) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (str[i] != pop(S)) &#123;</span><br><span class=\"line\">            flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    destroyStack(S);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">bool</span> res;</span><br><span class=\"line\">    res = Huiwen();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;true&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;false&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-入栈与出栈\"><a class=\"anchor\" href=\"#3-入栈与出栈\">#</a> 3: 入栈与出栈</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-05-47.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义栈结构体</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span>* base;</span><br><span class=\"line\">    <span class=\"type\">int</span>* top;</span><br><span class=\"line\">    <span class=\"type\">int</span> size;</span><br><span class=\"line\">    <span class=\"type\">int</span> length;</span><br><span class=\"line\">&#125; <span class=\"built_in\">stack</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化栈</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">initstack</span><span class=\"params\">(<span class=\"built_in\">stack</span>&amp; S)</span> &#123;</span><br><span class=\"line\">    S.base = new <span class=\"type\">int</span>[<span class=\"number\">101</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!S.base) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    S.top = S.base;</span><br><span class=\"line\">    S.size = <span class=\"number\">101</span>;</span><br><span class=\"line\">    S.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">push</span><span class=\"params\">(<span class=\"built_in\">stack</span>&amp; S, <span class=\"type\">int</span> num)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (S.top - S.base == S.size) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *S.top++ = num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">pop</span><span class=\"params\">(<span class=\"built_in\">stack</span>&amp; S)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> num;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (S.top != S.base) &#123;</span><br><span class=\"line\">        num=*--S.top;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">gettop</span><span class=\"params\">(<span class=\"built_in\">stack</span>&amp; S)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (S.top != S.base) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *(S.top - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;\\0&#x27;</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">destroyStack</span><span class=\"params\">(<span class=\"built_in\">stack</span>&amp; S)</span> &#123;</span><br><span class=\"line\">    delete[] S.base;</span><br><span class=\"line\">    S.base = nullptr;</span><br><span class=\"line\">    S.top = nullptr;</span><br><span class=\"line\">    S.size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    S.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">question3</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">stack</span> S;</span><br><span class=\"line\">    initstack(S);</span><br><span class=\"line\">    <span class=\"type\">int</span> n ;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        push(S, n);</span><br><span class=\"line\">        S.length++;</span><br><span class=\"line\">        sum += n * S.length;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; sum &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; S.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; pop(S);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; S.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    destroyStack(S);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    question3();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-点击消除\"><a class=\"anchor\" href=\"#4-点击消除\">#</a> 4: 点击消除</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-06-00.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Stack</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> data[<span class=\"number\">10000</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> top;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">initStack</span><span class=\"params\">(Stack&amp; s)</span> &#123;</span><br><span class=\"line\">    s.top = <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">push</span><span class=\"params\">(Stack&amp; s, <span class=\"type\">char</span> c)</span> &#123;</span><br><span class=\"line\">    s.data[++(s.top)] = c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"title function_\">pop</span><span class=\"params\">(Stack&amp; s)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.data[(s.top)--];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">isEmpty</span><span class=\"params\">(Stack&amp; s)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.top == <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"title function_\">top</span><span class=\"params\">(Stack&amp; s)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.data[s.top];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Reverse</span><span class=\"params\">(<span class=\"built_in\">string</span>&amp; s)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> right = s.size() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">        swap(s[left], s[right]);</span><br><span class=\"line\">        left++;</span><br><span class=\"line\">        right--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">string</span> <span class=\"title function_\">question4</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* str)</span> &#123;</span><br><span class=\"line\">    Stack s;</span><br><span class=\"line\">    initStack(s);</span><br><span class=\"line\">    <span class=\"type\">int</span> len = <span class=\"built_in\">strlen</span>(str);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty(s) || str[i] != top(s)) &#123;</span><br><span class=\"line\">            push(s, str[i]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            pop(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isEmpty(s)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">char</span> result[<span class=\"number\">10000</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!isEmpty(s)) &#123;</span><br><span class=\"line\">        result[index++] = pop(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    result[index] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> res = <span class=\"built_in\">string</span>(result);</span><br><span class=\"line\">    Reverse(res);  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> str[<span class=\"number\">10000</span>];</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; str;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> finalStr = question4(str);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; finalStr;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5-周末舞会\"><a class=\"anchor\" href=\"#5-周末舞会\">#</a> 5: 周末舞会</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-06-43.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m, n, k;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; m &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"type\">int</span> mQueue[<span class=\"number\">1001</span>], wQueue[<span class=\"number\">1001</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> mFront = <span class=\"number\">0</span>, mRear = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> wFront = <span class=\"number\">0</span>, wRear = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">        mQueue[mRear++] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        wQueue[wRear++] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mFront == mRear) &#123;  </span><br><span class=\"line\">            mFront = <span class=\"number\">0</span>;</span><br><span class=\"line\">            mRear = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++) &#123;</span><br><span class=\"line\">                mQueue[mRear++] = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (wFront == wRear) &#123; </span><br><span class=\"line\">            wFront = <span class=\"number\">0</span>;</span><br><span class=\"line\">            wRear = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++) &#123;</span><br><span class=\"line\">                wQueue[wRear++] = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; mQueue[mFront] &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; wQueue[wFront] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        mFront++;</span><br><span class=\"line\">        wFront++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"6-无法吃午餐的学生数量\"><a class=\"anchor\" href=\"#6-无法吃午餐的学生数量\">#</a> 6: 无法吃午餐的学生数量</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-07-32.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> data[<span class=\"number\">100</span>];</span><br><span class=\"line\">\t<span class=\"type\">int</span> front, rear, flag;</span><br><span class=\"line\">\t<span class=\"type\">int</span> len;</span><br><span class=\"line\">&#125;SqQ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitQueue</span><span class=\"params\">(SqQ&amp; Q)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tQ.front = Q.rear = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tQ.flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tQ.len = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">EnQueue</span><span class=\"params\">(SqQ&amp; Q, <span class=\"type\">int</span> e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tQ.data[Q.rear] = e;</span><br><span class=\"line\">\tQ.rear = (Q.rear + <span class=\"number\">1</span>) % Q.len;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (Q.front == Q.rear) &#123;</span><br><span class=\"line\">\t\tQ.flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">stack</span>&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">\tSqQ q;</span><br><span class=\"line\">\tInitQueue(q);</span><br><span class=\"line\">\t<span class=\"type\">int</span> input = <span class=\"number\">0</span> ;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ip[<span class=\"number\">100</span>] ;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; input;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (input != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tq.data[q.len] = input;</span><br><span class=\"line\">\t\tq.len++;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; input;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; input;</span><br><span class=\"line\">\t<span class=\"type\">int</span> slen=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (input != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\tip[slen] = input;</span><br><span class=\"line\">\t\tslen++;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; input;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = slen - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\ts.push(ip[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">int</span> dislike=<span class=\"number\">0</span>,staticlen=q.len;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (dislike != q.len&amp;&amp;q.len!=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (q.data[q.front] != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (s.top() == q.data[q.front]) &#123;</span><br><span class=\"line\">\t\t\t\t\ts.pop();</span><br><span class=\"line\">\t\t\t\t\tq.data[q.front] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t\t\t\tq.len--;</span><br><span class=\"line\">\t\t\t\t\tdislike = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tq.rear = q.front;</span><br><span class=\"line\">\t\t\t\t\tdislike++;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (q.len != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\tq.front = (q.front + <span class=\"number\">1</span>) % staticlen;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (q.data[q.front] == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tq.front = (q.front + <span class=\"number\">1</span>) % staticlen;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; dislike &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"7-栈的压入-弹出序列\"><a class=\"anchor\" href=\"#7-栈的压入-弹出序列\">#</a> 7: 栈的压入、弹出序列</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-08-40.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">question7</span><span class=\"params\">(<span class=\"type\">int</span>* pushed, <span class=\"type\">int</span>* popped, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">stack</span>&lt;<span class=\"type\">int</span>&gt; stk;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">        stk.push(pushed[j]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!stk.empty() &amp;&amp; stk.top() == popped[i]) &#123;</span><br><span class=\"line\">            stk.pop();</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> stk.empty();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> MAX_SIZE = <span class=\"number\">1000</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> pushed[MAX_SIZE];</span><br><span class=\"line\">    <span class=\"type\">int</span> popped[MAX_SIZE];</span><br><span class=\"line\">    <span class=\"type\">int</span> num, pushedindex = <span class=\"number\">0</span>, poppedindex = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">cin</span> &gt;&gt; num &amp;&amp; num != <span class=\"number\">-1</span> &amp;&amp; pushedindex &lt; MAX_SIZE) &#123;</span><br><span class=\"line\">        pushed[pushedindex++] = num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>.clear();</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>.ignore();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">cin</span> &gt;&gt; num &amp;&amp; num != <span class=\"number\">-1</span> &amp;&amp; pushedindex &lt; MAX_SIZE) &#123;</span><br><span class=\"line\">        popped[poppedindex++] = num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">bool</span> result = question7(pushed, popped, pushedindex);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;true&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;false&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"8-循环队列\"><a class=\"anchor\" href=\"#8-循环队列\">#</a> 8: 循环队列</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-09-25.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//循环队列数据结构</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> data[<span class=\"number\">105</span>];<span class=\"comment\">//数据域</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> front, rear,flag;   </span><br><span class=\"line\">\t<span class=\"type\">int</span> len;</span><br><span class=\"line\">&#125;SqQ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitQueue</span><span class=\"params\">(SqQ&amp; Q,<span class=\"type\">int</span> m)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tQ.front = Q.rear = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tQ.len = m;</span><br><span class=\"line\">\tQ.flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//判断队空函数</span></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">isEmpty</span><span class=\"params\">(SqQ Q)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (Q.front == Q.rear &amp;&amp; Q.flag == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//判断队满</span></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">isFull</span><span class=\"params\">(SqQ Q)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (Q.front == Q.rear &amp;&amp; Q.flag == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//入队函数</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">EnQueue</span><span class=\"params\">(SqQ&amp; Q, <span class=\"type\">int</span> e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tQ.data[Q.rear] = e;</span><br><span class=\"line\">\tQ.rear = (Q.rear + <span class=\"number\">1</span>) % Q.len;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (Q.front == Q.rear) &#123;</span><br><span class=\"line\">\t\tQ.flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//出队函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">DeQueue</span><span class=\"params\">(SqQ&amp; Q, <span class=\"type\">int</span>&amp; e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\te = Q.data[Q.front];</span><br><span class=\"line\">\tQ.front = (Q.front + <span class=\"number\">1</span>) % Q.len; </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (Q.front == Q.rear) &#123;</span><br><span class=\"line\">\t\tQ.flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//取队头</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">GetHead</span><span class=\"params\">(SqQ&amp; Q)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>  Q.data[Q.front];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tSqQ Q;</span><br><span class=\"line\">\t<span class=\"type\">int</span> m, n,popnum;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; m;</span><br><span class=\"line\">\tInitQueue(Q, m);</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> str;</span><br><span class=\"line\">\t<span class=\"type\">int</span> op[<span class=\"number\">105</span>], num[<span class=\"number\">105</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; str;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (str == <span class=\"string\">&quot;front&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\top[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (str == <span class=\"string\">&quot;push&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\top[i] = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cin</span>&gt;&gt;num[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (str == <span class=\"string\">&quot;pop&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\top[i] = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (op[i]) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isEmpty(Q)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;empty&quot;</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; GetHead(Q)&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isFull(Q)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;full&quot;</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tEnQueue(Q, num[i]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isEmpty(Q)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;empty&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tDeQueue(Q, popnum);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; popnum&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"9-最长有效括号\"><a class=\"anchor\" href=\"#9-最长有效括号\">#</a> 9: 最长有效括号</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-10-02.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> s[<span class=\"number\">10009</span>];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, s); </span><br><span class=\"line\">    <span class=\"type\">char</span> c[<span class=\"number\">10009</span>]; </span><br><span class=\"line\">    <span class=\"type\">int</span> top = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> max = <span class=\"number\">0</span>, sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">strlen</span>(s); i++) &#123;</span><br><span class=\"line\">        c[++top] = s[i];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (top &gt;= <span class=\"number\">1</span> &amp;&amp; c[top] == <span class=\"string\">&#x27;)&#x27;</span> &amp;&amp; c[top - <span class=\"number\">1</span>] == <span class=\"string\">&#x27;(&#x27;</span>) &#123;</span><br><span class=\"line\">            sum += <span class=\"number\">2</span>;</span><br><span class=\"line\">            top -= <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (top == <span class=\"number\">0</span> &amp;&amp; c[top] == <span class=\"string\">&#x27;)&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sum &gt; max) &#123;</span><br><span class=\"line\">                max = sum;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">            top--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum &gt; max) max = sum;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, max);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"10-找出游戏的获胜者\"><a class=\"anchor\" href=\"#10-找出游戏的获胜者\">#</a> 10: 找出游戏的获胜者</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-11-19.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> rank;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>* <span class=\"title\">next</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>* <span class=\"title\">front</span>;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>* <span class=\"title\">sNode</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, k;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class=\"line\">    sNode L = (sNode)<span class=\"built_in\">malloc</span>(n * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> Node));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        (L + i)-&gt;rank = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        (L + i)-&gt;next = L + (i + <span class=\"number\">1</span>) % n;</span><br><span class=\"line\">        (L + i)-&gt;front = L + (i - <span class=\"number\">1</span> + n) % n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sNode p = L;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; k - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p-&gt;front-&gt;next = p-&gt;next;</span><br><span class=\"line\">        p-&gt;next-&gt;front = p-&gt;front;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, p-&gt;rank);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"线性表\"><a class=\"anchor\" href=\"#线性表\">#</a> 线性表</h1>\n<h2 id=\"1-合并两个有序链表\"><a class=\"anchor\" href=\"#1-合并两个有序链表\">#</a> 1: 合并两个有序链表</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-13-39.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span>* <span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; LNode, * linklist;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitList</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    L = new LNode;</span><br><span class=\"line\">    L-&gt;data;</span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">createlist_R</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* r;</span><br><span class=\"line\">    LNode* p;</span><br><span class=\"line\">    r = L;</span><br><span class=\"line\">    p = new LNode;</span><br><span class=\"line\">    p-&gt;data = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> m;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m!=<span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        p = new LNode;</span><br><span class=\"line\">        p-&gt;data=m;</span><br><span class=\"line\">        p-&gt;next = <span class=\"literal\">NULL</span>; r-&gt;next = p;</span><br><span class=\"line\">        r = p;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">printlist</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* p;</span><br><span class=\"line\">    p = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">hebing</span><span class=\"params\">(linklist&amp; A,linklist&amp; B)</span> &#123;</span><br><span class=\"line\">    linklist C;</span><br><span class=\"line\">    InitList(C);</span><br><span class=\"line\">    LNode* p, * q, *s, *t;</span><br><span class=\"line\">    p= A-&gt;next, q = B-&gt;next;</span><br><span class=\"line\">    s = new LNode,s=C;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span> &amp;&amp; q != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        t = new LNode;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p-&gt;data &gt;= q-&gt;data) &#123;</span><br><span class=\"line\">            t-&gt;data = q-&gt;data;</span><br><span class=\"line\">            q = q-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            t-&gt;data = p-&gt;data;</span><br><span class=\"line\">            t-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        s-&gt;next = t;</span><br><span class=\"line\">        s = t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        s-&gt;next = q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (q == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        s-&gt;next = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printlist(C);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    linklist A, B;</span><br><span class=\"line\">    InitList(A);</span><br><span class=\"line\">    InitList(B);</span><br><span class=\"line\">    createlist_R(A); </span><br><span class=\"line\">    createlist_R(B);</span><br><span class=\"line\">    hebing(A, B);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-删除排序链表中的重复元素\"><a class=\"anchor\" href=\"#2-删除排序链表中的重复元素\">#</a> 2: 删除排序链表中的重复元素</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-14-23.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> val;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>* <span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; Node;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输入链表</span></span><br><span class=\"line\">Node* <span class=\"title function_\">inputList</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\">    Node* head = (Node*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Node));</span><br><span class=\"line\">    Node* tail = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x) &amp;&amp; x != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        Node* newNode = (Node*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Node));</span><br><span class=\"line\">        newNode-&gt;val = x;</span><br><span class=\"line\">        newNode-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        tail-&gt;next = newNode;</span><br><span class=\"line\">        tail = newNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除重复元素</span></span><br><span class=\"line\">Node* <span class=\"title function_\">removeDuplicates</span><span class=\"params\">(Node* head)</span> &#123;</span><br><span class=\"line\">    Node* curr = head-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (curr &amp;&amp; curr-&gt;next) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (curr-&gt;val == curr-&gt;next-&gt;val) &#123;</span><br><span class=\"line\">            Node* tmp = curr-&gt;next;</span><br><span class=\"line\">            curr-&gt;next = curr-&gt;next-&gt;next;</span><br><span class=\"line\">            <span class=\"built_in\">free</span>(tmp); <span class=\"comment\">// 释放重复节点</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            curr = curr-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印链表</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">printList</span><span class=\"params\">(Node* head)</span> &#123;</span><br><span class=\"line\">    head = head-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (head) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, head-&gt;val);</span><br><span class=\"line\">        head = head-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    Node* head = inputList();</span><br><span class=\"line\">    head = removeDuplicates(head);</span><br><span class=\"line\">    printList(head);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-移除链表元素\"><a class=\"anchor\" href=\"#3-移除链表元素\">#</a> 3: 移除链表元素</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-14-59.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span>* <span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; LNode, * linklist;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitList</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    L = new LNode;</span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">createlist_R</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* r;</span><br><span class=\"line\">    LNode* p;</span><br><span class=\"line\">    r = L;</span><br><span class=\"line\">    p = new LNode;</span><br><span class=\"line\">    p-&gt;data = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> m;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        p = new LNode;</span><br><span class=\"line\">        p-&gt;data = m;</span><br><span class=\"line\">        p-&gt;next = <span class=\"literal\">NULL</span>; r-&gt;next = p;</span><br><span class=\"line\">        r = p;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">printlist</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* p;</span><br><span class=\"line\">    p = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p-&gt;next != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; p-&gt;data ;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delete</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* p, * q;</span><br><span class=\"line\">    p = L;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        q = p;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        delete q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Deleteval</span><span class=\"params\">(linklist&amp; A, <span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        printlist(A);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LNode* p, * q, * t;</span><br><span class=\"line\">    p = A-&gt;next, q = A;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p-&gt;data!=val) &#123;</span><br><span class=\"line\">            q-&gt;next = p;</span><br><span class=\"line\">            q = p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    q-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    printlist(A);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> val;</span><br><span class=\"line\">    linklist A;</span><br><span class=\"line\">    InitList(A);</span><br><span class=\"line\">    createlist_R(A);</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; val;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span>* <span class=\"title\">head</span> =</span> A;</span><br><span class=\"line\">    Deleteval(A,val);</span><br><span class=\"line\">    Delete(A);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-从尾到头打印链表\"><a class=\"anchor\" href=\"#4-从尾到头打印链表\">#</a> 4: 从尾到头打印链表</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-15-46.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span>* <span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; LNode, * linklist;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitList</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    L = new LNode;</span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">createlist_H</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* p;</span><br><span class=\"line\">    <span class=\"type\">int</span> m;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        p = new LNode;</span><br><span class=\"line\">        p-&gt;data=m;</span><br><span class=\"line\">        p-&gt;next = L-&gt;next, L-&gt;next = p;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">printlist</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* p;</span><br><span class=\"line\">    p = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p-&gt;next != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; p-&gt;data ;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delete</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* p, * q;</span><br><span class=\"line\">    p = L;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        q = p;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        delete q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这里偷个懒，利用前插法</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;   </span><br><span class=\"line\">    linklist A;</span><br><span class=\"line\">    InitList(A);</span><br><span class=\"line\">    createlist_H(A);</span><br><span class=\"line\">    printlist(A);</span><br><span class=\"line\">    Delete(A);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5-合并两个链表\"><a class=\"anchor\" href=\"#5-合并两个链表\">#</a> 5: 合并两个链表</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-16-25.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span>* <span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; LNode, * linklist;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitList</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    L = new LNode;</span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">createlist_R</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* r;</span><br><span class=\"line\">    LNode* p;</span><br><span class=\"line\">    r = L;</span><br><span class=\"line\">    p = new LNode;</span><br><span class=\"line\">    p-&gt;data = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> m;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        p = new LNode;</span><br><span class=\"line\">        p-&gt;data = m;</span><br><span class=\"line\">        p-&gt;next = <span class=\"literal\">NULL</span>; r-&gt;next = p;</span><br><span class=\"line\">        r = p;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">printlist</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* p;</span><br><span class=\"line\">    p = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p-&gt;next != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; p-&gt;data ;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delete</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* p, * q;</span><br><span class=\"line\">    p = L;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        q = p;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        delete q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">link_AB</span><span class=\"params\">(linklist&amp; A, linklist&amp; B,<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">    LNode* m ;</span><br><span class=\"line\">    LNode* s = A;</span><br><span class=\"line\">    LNode* p = A-&gt;next;</span><br><span class=\"line\">    LNode* Bstart = B-&gt;next;</span><br><span class=\"line\">    LNode* Bend=B;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (Bend-&gt;next != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        Bend = Bend-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag &lt; a) &#123;</span><br><span class=\"line\">            s-&gt;next = p;</span><br><span class=\"line\">            s = s-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flag == a) &#123;</span><br><span class=\"line\">            s-&gt;next = Bstart;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flag == b+<span class=\"number\">1</span> ) &#123;</span><br><span class=\"line\">            Bend-&gt;next = p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        flag++;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;   </span><br><span class=\"line\">    linklist A;</span><br><span class=\"line\">    linklist B;</span><br><span class=\"line\">    InitList(A);</span><br><span class=\"line\">    InitList(B);</span><br><span class=\"line\">    createlist_R(A);</span><br><span class=\"line\">    <span class=\"type\">int</span> a, b;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; a, <span class=\"built_in\">cin</span> &gt;&gt; b;</span><br><span class=\"line\">    createlist_R(B);</span><br><span class=\"line\">    link_AB(A, B,a,b);</span><br><span class=\"line\">    printlist(A);</span><br><span class=\"line\">    Delete(A);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"6-二进制链表转整数\"><a class=\"anchor\" href=\"#6-二进制链表转整数\">#</a> 6: 二进制链表转整数</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-17-05.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span>* <span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; LNode, * linklist;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitList</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    L = new LNode;</span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">createlist_R</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* r;</span><br><span class=\"line\">    LNode* p;</span><br><span class=\"line\">    r = L;</span><br><span class=\"line\">    p = new LNode;</span><br><span class=\"line\">    p-&gt;data = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> m;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        p = new LNode;</span><br><span class=\"line\">        p-&gt;data = m;</span><br><span class=\"line\">        p-&gt;next = <span class=\"literal\">NULL</span>; r-&gt;next = p;</span><br><span class=\"line\">        r = p;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">printlist</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* p;</span><br><span class=\"line\">    p = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p-&gt;next != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; p-&gt;data ;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delete</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* p, * q;</span><br><span class=\"line\">    p = L;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        q = p;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        delete q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">VinaryOutput</span><span class=\"params\">(linklist&amp; A)</span> &#123;</span><br><span class=\"line\">    LNode* p=A-&gt;next;</span><br><span class=\"line\">    <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p!=<span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        res *= <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p-&gt;data == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            res += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;   </span><br><span class=\"line\">    linklist A;</span><br><span class=\"line\">    InitList(A);</span><br><span class=\"line\">    createlist_R(A);</span><br><span class=\"line\">    VinaryOutput(A);</span><br><span class=\"line\">    Delete(A);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"7-两数相加ii\"><a class=\"anchor\" href=\"#7-两数相加ii\">#</a> 7: 两数相加 Ⅱ</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-17-52.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span>* <span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; LNode, * linklist;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitList</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    L = new LNode;</span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">createlist_R</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* r;</span><br><span class=\"line\">    LNode* p;</span><br><span class=\"line\">    r = L;</span><br><span class=\"line\">    p = new LNode;</span><br><span class=\"line\">    p-&gt;data = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> m;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        p = new LNode;</span><br><span class=\"line\">        p-&gt;data = m;</span><br><span class=\"line\">        p-&gt;next = <span class=\"literal\">NULL</span>; r-&gt;next = p;</span><br><span class=\"line\">        r = p;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">createlist_H</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* p;</span><br><span class=\"line\">    <span class=\"type\">int</span> m;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        p = new LNode;</span><br><span class=\"line\">        p-&gt;data = m;</span><br><span class=\"line\">        p-&gt;next = L-&gt;next;</span><br><span class=\"line\">        L-&gt;next = p;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">printlist</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* p;</span><br><span class=\"line\">    p = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p-&gt;next != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; p-&gt;data ;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delete</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* p, * q;</span><br><span class=\"line\">    p = L;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        q = p;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        delete q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LNode* <span class=\"title function_\">listABsum</span><span class=\"params\">(linklist&amp; A, linklist&amp; B)</span> &#123;</span><br><span class=\"line\">    linklist C;</span><br><span class=\"line\">    InitList(C);</span><br><span class=\"line\">    LNode* cur;</span><br><span class=\"line\">    <span class=\"type\">int</span> carry = <span class=\"number\">0</span>; </span><br><span class=\"line\">    LNode* p, * q;</span><br><span class=\"line\">    p = A-&gt;next, q = B-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p!= <span class=\"literal\">NULL</span> || q != <span class=\"literal\">NULL</span> || carry != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> sum = carry;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            sum += p-&gt;data;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            sum += q-&gt;data;</span><br><span class=\"line\">            q = q-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cur = new LNode;</span><br><span class=\"line\">        carry = sum / <span class=\"number\">10</span>;</span><br><span class=\"line\">        sum = sum % <span class=\"number\">10</span>;</span><br><span class=\"line\">        cur-&gt;data = sum;</span><br><span class=\"line\">        cur-&gt;next = C-&gt;next;</span><br><span class=\"line\">        C-&gt;next = cur;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;   </span><br><span class=\"line\">    linklist A;</span><br><span class=\"line\">    linklist B;</span><br><span class=\"line\">    linklist res;</span><br><span class=\"line\">    InitList(A);</span><br><span class=\"line\">    InitList(B);</span><br><span class=\"line\">    InitList(res);</span><br><span class=\"line\">    createlist_H(A);</span><br><span class=\"line\">    createlist_H(B);</span><br><span class=\"line\">    res=listABsum(A,B);</span><br><span class=\"line\">    printlist(res);</span><br><span class=\"line\">    Delete(A);</span><br><span class=\"line\">    Delete(B);</span><br><span class=\"line\">    Delete(res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"8-反转链表ii\"><a class=\"anchor\" href=\"#8-反转链表ii\">#</a> 8: 反转链表 Ⅱ</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-18-27.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span>* <span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; LNode, * linklist;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitList</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    L = new LNode;</span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">createlist_R</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* r;</span><br><span class=\"line\">    LNode* p;</span><br><span class=\"line\">    r = L;</span><br><span class=\"line\">    p = new LNode;</span><br><span class=\"line\">    p-&gt;data = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> m;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        p = new LNode;</span><br><span class=\"line\">        p-&gt;data = m;</span><br><span class=\"line\">        p-&gt;next = <span class=\"literal\">NULL</span>; r-&gt;next = p;</span><br><span class=\"line\">        r = p;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">printlist</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* p;</span><br><span class=\"line\">    p = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p-&gt;next != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; p-&gt;data ;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delete</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* p, * q;</span><br><span class=\"line\">    p = L;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        q = p;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        delete q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">linklist <span class=\"title function_\">reverselist</span><span class=\"params\">(linklist&amp; A, <span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> flag=<span class=\"number\">1</span>;</span><br><span class=\"line\">    linklist B;</span><br><span class=\"line\">    InitList(B);</span><br><span class=\"line\">    LNode* cur,* p,*end;</span><br><span class=\"line\">    cur = A-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag &gt;= a &amp;&amp; flag &lt;= b) &#123;</span><br><span class=\"line\">            p = new LNode;</span><br><span class=\"line\">            p-&gt;data = cur-&gt;data;</span><br><span class=\"line\">            p-&gt;next = B-&gt;next;</span><br><span class=\"line\">            B-&gt;next = p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        flag++;</span><br><span class=\"line\">        cur = cur-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cur = A-&gt;next,flag=<span class=\"number\">1</span>,p=B-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (flag &lt;= b&amp;&amp;cur!=<span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag &gt;= a) &#123;</span><br><span class=\"line\">            cur-&gt;data = p-&gt;data;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        flag++;</span><br><span class=\"line\">        cur = cur-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> A;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a, b;</span><br><span class=\"line\">    linklist A;</span><br><span class=\"line\">    linklist res;</span><br><span class=\"line\">    InitList(A);</span><br><span class=\"line\">    InitList(res);</span><br><span class=\"line\">    createlist_R(A);</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; a, <span class=\"built_in\">cin</span> &gt;&gt; b;</span><br><span class=\"line\">    res=reverselist(A,a,b);</span><br><span class=\"line\">    printlist(res);</span><br><span class=\"line\">    Delete(A);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"9-链表最大孪生和\"><a class=\"anchor\" href=\"#9-链表最大孪生和\">#</a> 9: 链表最大孪生和</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-19-17.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span>* <span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; LNode, * linklist;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitList</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    L = new LNode;</span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">createlist_R</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* r;</span><br><span class=\"line\">    LNode* p;</span><br><span class=\"line\">    r = L;</span><br><span class=\"line\">    p = new LNode;</span><br><span class=\"line\">    p-&gt;data = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> m;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        p = new LNode;</span><br><span class=\"line\">        p-&gt;data = m;</span><br><span class=\"line\">        p-&gt;next = <span class=\"literal\">NULL</span>; r-&gt;next = p;</span><br><span class=\"line\">        r = p;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">printlist</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* p;</span><br><span class=\"line\">    p = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p-&gt;next != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; p-&gt;data ;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delete</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* p, * q;</span><br><span class=\"line\">    p = L;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        q = p;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        delete q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">MAX</span><span class=\"params\">(linklist&amp; A)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//将A使用前插法赋值给B链，这样两个链就是反过来的</span></span><br><span class=\"line\">    linklist B;</span><br><span class=\"line\">    InitList(B);</span><br><span class=\"line\">    LNode* p = A-&gt;next;</span><br><span class=\"line\">    LNode* q;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        q = new LNode;</span><br><span class=\"line\">        q-&gt;data = p-&gt;data;</span><br><span class=\"line\">        q-&gt;next = B-&gt;next;</span><br><span class=\"line\">        B-&gt;next = q;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LNode* s;</span><br><span class=\"line\">    p = A-&gt;next, s = B-&gt;next;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp, max = p-&gt;data + s-&gt;data;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>&amp;&amp;s!=<span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        temp = p-&gt;data + s-&gt;data;</span><br><span class=\"line\">        s = s-&gt;next;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp &gt; max) &#123;</span><br><span class=\"line\">            max = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> max;</span><br><span class=\"line\">    linklist A;</span><br><span class=\"line\">    linklist res;</span><br><span class=\"line\">    InitList(A);</span><br><span class=\"line\">    InitList(res);</span><br><span class=\"line\">    createlist_R(A);</span><br><span class=\"line\">    max=MAX(A);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;max;</span><br><span class=\"line\">    Delete(A);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"10-两数相加ii新\"><a class=\"anchor\" href=\"#10-两数相加ii新\">#</a> 10: 两数相加 Ⅱ(新）</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-19-59.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span>* <span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; LNode, * linklist;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitList</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    L = new LNode;</span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">createlist_R</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* r;</span><br><span class=\"line\">    LNode* p;</span><br><span class=\"line\">    r = L;</span><br><span class=\"line\">    p = new LNode;</span><br><span class=\"line\">    p-&gt;data = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> m;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        p = new LNode;</span><br><span class=\"line\">        p-&gt;data = m;</span><br><span class=\"line\">        p-&gt;next = <span class=\"literal\">NULL</span>; r-&gt;next = p;</span><br><span class=\"line\">        r = p;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">createlist_H</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* p;</span><br><span class=\"line\">    <span class=\"type\">int</span> m;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        p = new LNode;</span><br><span class=\"line\">        p-&gt;data = m;</span><br><span class=\"line\">        p-&gt;next = L-&gt;next;</span><br><span class=\"line\">        L-&gt;next = p;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">printlist</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* p;</span><br><span class=\"line\">    p = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p-&gt;next != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; p-&gt;data ;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delete</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* p, * q;</span><br><span class=\"line\">    p = L;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        q = p;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        delete q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LNode* <span class=\"title function_\">listABsum</span><span class=\"params\">(linklist&amp; A, linklist&amp; B)</span> &#123;</span><br><span class=\"line\">    linklist C;</span><br><span class=\"line\">    InitList(C);</span><br><span class=\"line\">    LNode* cur;</span><br><span class=\"line\">    <span class=\"type\">int</span> carry = <span class=\"number\">0</span>; </span><br><span class=\"line\">    LNode* p, * q;</span><br><span class=\"line\">    p = A-&gt;next, q = B-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p!= <span class=\"literal\">NULL</span> || q != <span class=\"literal\">NULL</span> || carry != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> sum = carry;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            sum += p-&gt;data;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            sum += q-&gt;data;</span><br><span class=\"line\">            q = q-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cur = new LNode;</span><br><span class=\"line\">        carry = sum / <span class=\"number\">10</span>;</span><br><span class=\"line\">        sum = sum % <span class=\"number\">10</span>;</span><br><span class=\"line\">        cur-&gt;data = sum;</span><br><span class=\"line\">        cur-&gt;next = C-&gt;next;</span><br><span class=\"line\">        C-&gt;next = cur;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;   </span><br><span class=\"line\">    linklist A;</span><br><span class=\"line\">    linklist B;</span><br><span class=\"line\">    linklist res;</span><br><span class=\"line\">    InitList(A);</span><br><span class=\"line\">    InitList(B);</span><br><span class=\"line\">    InitList(res);</span><br><span class=\"line\">    createlist_H(A);</span><br><span class=\"line\">    createlist_H(B);</span><br><span class=\"line\">    res=listABsum(A,B);</span><br><span class=\"line\">    printlist(res);</span><br><span class=\"line\">    Delete(A);</span><br><span class=\"line\">    Delete(B);</span><br><span class=\"line\">    Delete(res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"11-重排链表\"><a class=\"anchor\" href=\"#11-重排链表\">#</a> 11: 重排链表</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-20-37.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span>* <span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; LNode, * linklist;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitList</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    L = new LNode;</span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">createlist_R</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* r;</span><br><span class=\"line\">    LNode* p;</span><br><span class=\"line\">    r = L;</span><br><span class=\"line\">    <span class=\"type\">int</span> m, n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        p = new LNode;</span><br><span class=\"line\">        n++;</span><br><span class=\"line\">        p-&gt;data = m;</span><br><span class=\"line\">        p-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        r-&gt;next = p;</span><br><span class=\"line\">        r = p;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">printlist</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* p;</span><br><span class=\"line\">    p = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p-&gt;next != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; p-&gt;data;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delete</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* p, * q;</span><br><span class=\"line\">    p = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        q = p;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        delete q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LNode* <span class=\"title function_\">Reorder</span><span class=\"params\">(LNode* head, <span class=\"type\">int</span> length)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (length &lt;= <span class=\"number\">2</span>) <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    LNode* slow = head-&gt;next;</span><br><span class=\"line\">    LNode* fast = head-&gt;next;</span><br><span class=\"line\">    <span class=\"comment\">// 找到链表中点</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast-&gt;next &amp;&amp; fast-&gt;next-&gt;next) &#123;</span><br><span class=\"line\">        slow = slow-&gt;next;</span><br><span class=\"line\">        fast = fast-&gt;next-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 反转后半部分链表</span></span><br><span class=\"line\">    LNode* prev = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    LNode* curr = slow-&gt;next;</span><br><span class=\"line\">    slow-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (curr) &#123;</span><br><span class=\"line\">        LNode* next = curr-&gt;next;</span><br><span class=\"line\">        curr-&gt;next = prev;</span><br><span class=\"line\">        prev = curr;</span><br><span class=\"line\">        curr = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 合并两个链表</span></span><br><span class=\"line\">    LNode* p1 = head-&gt;next;</span><br><span class=\"line\">    LNode* p2 = prev;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p1 &amp;&amp; p2) &#123;</span><br><span class=\"line\">        LNode* next1 = p1-&gt;next;</span><br><span class=\"line\">        LNode* next2 = p2-&gt;next;</span><br><span class=\"line\">        p1-&gt;next = p2;</span><br><span class=\"line\">        p2-&gt;next = next1;</span><br><span class=\"line\">        p1 = next1;</span><br><span class=\"line\">        p2 = next2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> length;</span><br><span class=\"line\">    linklist A;</span><br><span class=\"line\">    linklist res;</span><br><span class=\"line\">    InitList(A);</span><br><span class=\"line\">    InitList(res);</span><br><span class=\"line\">    <span class=\"comment\">// 前插法输入给A链，就构成了倒序，方便用index来删点</span></span><br><span class=\"line\">    length = createlist_R(A);</span><br><span class=\"line\">    res = Reorder(A, length);</span><br><span class=\"line\">    printlist(res);</span><br><span class=\"line\">    Delete(res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"12-删除链表的倒数第-n-个结点\"><a class=\"anchor\" href=\"#12-删除链表的倒数第-n-个结点\">#</a> 12: 删除链表的倒数第 N 个结点</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-21-25.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span>* <span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; LNode, * linklist;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitList</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    L = new LNode;</span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">createlist_H</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* p;</span><br><span class=\"line\">    <span class=\"type\">int</span> m;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        p = new LNode;</span><br><span class=\"line\">        p-&gt;data = m;</span><br><span class=\"line\">        p-&gt;next = L-&gt;next;</span><br><span class=\"line\">        L-&gt;next = p;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">printlist</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* p;</span><br><span class=\"line\">    p = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p-&gt;next != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; p-&gt;data ;</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delete</span><span class=\"params\">(linklist&amp; L)</span> &#123;</span><br><span class=\"line\">    LNode* p, * q;</span><br><span class=\"line\">    p = L;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        q = p;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        delete q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">linklist <span class=\"title function_\">DELETE</span><span class=\"params\">(linklist&amp; A, <span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">    LNode* cur,*pre;</span><br><span class=\"line\">    pre = A;</span><br><span class=\"line\">    cur = A-&gt;next;</span><br><span class=\"line\">    <span class=\"type\">int</span> flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag == index) &#123;</span><br><span class=\"line\">            pre-&gt;next = cur-&gt;next;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            pre = cur;</span><br><span class=\"line\">            cur = cur-&gt;next;</span><br><span class=\"line\">            flag++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//把处理过后的A表再使用前插法倒序赋值给B表，B表返回给res表</span></span><br><span class=\"line\">    linklist B;</span><br><span class=\"line\">    InitList(B);</span><br><span class=\"line\">    LNode* p = A-&gt;next;</span><br><span class=\"line\">    LNode* q;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        q = new LNode;</span><br><span class=\"line\">        q-&gt;data = p-&gt;data;</span><br><span class=\"line\">        q-&gt;next = B-&gt;next;</span><br><span class=\"line\">        B-&gt;next = q;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> B;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> index;</span><br><span class=\"line\">    linklist A;</span><br><span class=\"line\">    linklist res;</span><br><span class=\"line\">    InitList(A);</span><br><span class=\"line\">    InitList(res);</span><br><span class=\"line\">    <span class=\"comment\">//前插法输入给A链，就构成了倒序，方便用index来删点</span></span><br><span class=\"line\">    createlist_H(A);</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;index;</span><br><span class=\"line\">    res = DELETE(A,index);</span><br><span class=\"line\">    printlist(res);</span><br><span class=\"line\">    Delete(A);</span><br><span class=\"line\">    Delete(res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"串与数组\"><a class=\"anchor\" href=\"#串与数组\">#</a> 串与数组</h1>\n<h2 id=\"1-数组与串-小鱼的数字游戏\"><a class=\"anchor\" href=\"#1-数组与串-小鱼的数字游戏\">#</a> 1: 数组与串 - 小鱼的数字游戏</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-22-18.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> num[<span class=\"number\">10000</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; num[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (num[i] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\ti++;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; num[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\ti--;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; num[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-数组与串-小鱼比可爱\"><a class=\"anchor\" href=\"#2-数组与串-小鱼比可爱\">#</a> 2: 数组与串 - 小鱼比可爱</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-23-57.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"type\">int</span> *num = new <span class=\"type\">int</span>[n];</span><br><span class=\"line\">\t<span class=\"type\">int</span>* res = new <span class=\"type\">int</span>[n];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; num[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\tres[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; i; k++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (num[i] &gt; num[k]) &#123;</span><br><span class=\"line\">\t\t\t\t\tres[i] += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; res[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdelete[] num;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-数组与串-杨辉三角\"><a class=\"anchor\" href=\"#3-数组与串-杨辉三角\">#</a> 3: 数组与串 - 杨辉三角</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-24-31.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"type\">int</span> *row = new <span class=\"type\">int</span>[n];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\trow[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i<span class=\"number\">-1</span>; j &gt; <span class=\"number\">0</span>;j--) &#123;</span><br><span class=\"line\">\t\t\t\trow[j] = row[j] + row[j<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt;= i; k++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; row[k]&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-数组与串-冰雹猜想\"><a class=\"anchor\" href=\"#4-数组与串-冰雹猜想\">#</a> 4: 数组与串 - 冰雹猜想</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-25-13.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"built_in\">stack</span>&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (n != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\ts.push(n);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (n % <span class=\"number\">2</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\tn = n * <span class=\"number\">3</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tn = n / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts.push(n);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!s.empty()) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; s.top() &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t\ts.pop();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5-数组与串-液晶屏\"><a class=\"anchor\" href=\"#5-数组与串-液晶屏\">#</a> 5: 数组与串 - 液晶屏</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-25-48.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* op = new <span class=\"type\">char</span>[<span class=\"number\">5</span>*n];</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> str;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; str;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (str[i]) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;0&#x27;</span>:</span><br><span class=\"line\">\t\t\top[i] = <span class=\"number\">1</span>, op[i + n] = <span class=\"number\">2</span>, op[i + <span class=\"number\">2</span> * n] = <span class=\"number\">2</span>, op[i + <span class=\"number\">3</span> * n] = <span class=\"number\">2</span>, op[i + <span class=\"number\">4</span> * n] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;1&#x27;</span>:</span><br><span class=\"line\">\t\t\top[i] = <span class=\"number\">3</span>, op[i + n] = <span class=\"number\">3</span>, op[i + <span class=\"number\">2</span> * n] = <span class=\"number\">3</span>, op[i + <span class=\"number\">3</span> * n] = <span class=\"number\">3</span>, op[i + <span class=\"number\">4</span> * n] = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;2&#x27;</span>:</span><br><span class=\"line\">\t\t\top[i] = <span class=\"number\">1</span>, op[i + n] = <span class=\"number\">3</span>, op[i + <span class=\"number\">2</span> * n] = <span class=\"number\">1</span>, op[i + <span class=\"number\">3</span> * n] = <span class=\"number\">4</span>, op[i + <span class=\"number\">4</span> * n] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;3&#x27;</span>:</span><br><span class=\"line\">\t\t\top[i] = <span class=\"number\">1</span>, op[i + n] = <span class=\"number\">3</span>, op[i + <span class=\"number\">2</span> * n] = <span class=\"number\">1</span>, op[i + <span class=\"number\">3</span> * n] = <span class=\"number\">3</span>, op[i + <span class=\"number\">4</span> * n] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;4&#x27;</span>:</span><br><span class=\"line\">\t\t\top[i] = <span class=\"number\">2</span>, op[i + n] = <span class=\"number\">2</span>, op[i + <span class=\"number\">2</span> * n] = <span class=\"number\">1</span>, op[i + <span class=\"number\">3</span> * n] = <span class=\"number\">3</span>, op[i + <span class=\"number\">4</span> * n] = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;5&#x27;</span>:</span><br><span class=\"line\">\t\t\top[i] = <span class=\"number\">1</span>, op[i + n] = <span class=\"number\">4</span>, op[i + <span class=\"number\">2</span> * n] = <span class=\"number\">1</span>, op[i + <span class=\"number\">3</span> * n] = <span class=\"number\">3</span>, op[i + <span class=\"number\">4</span> * n] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;6&#x27;</span>:</span><br><span class=\"line\">\t\t\top[i] = <span class=\"number\">1</span>, op[i + n] = <span class=\"number\">4</span>, op[i + <span class=\"number\">2</span> * n] = <span class=\"number\">1</span>, op[i + <span class=\"number\">3</span> * n] = <span class=\"number\">2</span>, op[i + <span class=\"number\">4</span> * n] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;7&#x27;</span>:</span><br><span class=\"line\">\t\t\top[i] = <span class=\"number\">1</span>, op[i + n] = <span class=\"number\">3</span>, op[i + <span class=\"number\">2</span> * n] = <span class=\"number\">3</span>, op[i + <span class=\"number\">3</span> * n] = <span class=\"number\">3</span>, op[i + <span class=\"number\">4</span> * n] = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;8&#x27;</span>:</span><br><span class=\"line\">\t\t\top[i] = <span class=\"number\">1</span>, op[i + n] = <span class=\"number\">2</span>, op[i + <span class=\"number\">2</span> * n] = <span class=\"number\">1</span>, op[i + <span class=\"number\">3</span> * n] = <span class=\"number\">2</span>, op[i + <span class=\"number\">4</span> * n] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;9&#x27;</span>:</span><br><span class=\"line\">\t\t\top[i] = <span class=\"number\">1</span>, op[i + n] = <span class=\"number\">2</span>, op[i + <span class=\"number\">2</span> * n] = <span class=\"number\">1</span>, op[i + <span class=\"number\">3</span> * n] = <span class=\"number\">3</span>, op[i + <span class=\"number\">4</span> * n] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span> * n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (op[i]) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;XXX&quot;</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;X.X&quot;</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;..X&quot;</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;X..&quot;</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((i + <span class=\"number\">1</span>) % n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&#x27;.&#x27;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"6-数组与串-n皇后\"><a class=\"anchor\" href=\"#6-数组与串-n皇后\">#</a> 6: 数组与串 - N 皇后</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-26-37.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> r, <span class=\"type\">int</span> n, <span class=\"type\">bool</span>* col, <span class=\"type\">bool</span>* diag1, <span class=\"type\">bool</span>* diag2, <span class=\"type\">int</span>* ans)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r == n) &#123;</span><br><span class=\"line\">        (*ans)++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> c = <span class=\"number\">0</span>; c &lt; n; c++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> rc = r - c + n - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!col[c] &amp;&amp; !diag1[r + c] &amp;&amp; !diag2[rc]) &#123;</span><br><span class=\"line\">            col[c] = diag1[r + c] = diag2[rc] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            dfs(r + <span class=\"number\">1</span>, n, col, diag1, diag2, ans);</span><br><span class=\"line\">            col[c] = diag1[r + c] = diag2[rc] = <span class=\"literal\">false</span>; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Nqueens</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">bool</span>* col = new <span class=\"type\">bool</span>[n]();</span><br><span class=\"line\">    <span class=\"type\">bool</span>* diag1 = new <span class=\"type\">bool</span>[<span class=\"number\">2</span> * n - <span class=\"number\">1</span>]();</span><br><span class=\"line\">    <span class=\"type\">bool</span>* diag2 = new <span class=\"type\">bool</span>[<span class=\"number\">2</span> * n - <span class=\"number\">1</span>]();</span><br><span class=\"line\"></span><br><span class=\"line\">    dfs(<span class=\"number\">0</span>, n, col, diag1, diag2, &amp;ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; Nqueens(n);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"树\"><a class=\"anchor\" href=\"#树\">#</a> 树</h1>\n<h2 id=\"1-相同的树\"><a class=\"anchor\" href=\"#1-相同的树\">#</a> 1: 相同的树</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-27-45.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> treeStr1, treeStr2; </span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; treeStr1 &gt;&gt; treeStr2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; treeNodes1;  </span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; treeNodes2;  </span><br><span class=\"line\">    <span class=\"built_in\">string</span> currentNode;         </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; treeStr1.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> c = treeStr1[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;,&#x27;</span>) &#123;</span><br><span class=\"line\">            treeNodes1.push_back(currentNode);</span><br><span class=\"line\">            currentNode.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            currentNode += c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    treeNodes1.push_back(currentNode); </span><br><span class=\"line\">    currentNode.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; treeStr2.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> c = treeStr2[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;,&#x27;</span>) &#123;</span><br><span class=\"line\">            treeNodes2.push_back(currentNode);</span><br><span class=\"line\">            currentNode.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            currentNode += c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    treeNodes2.push_back(currentNode);  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (treeNodes1.size() != treeNodes2.size()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;false&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">bool</span> isSame = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; treeNodes1.size(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (treeNodes1[i] != treeNodes2[i]) &#123;</span><br><span class=\"line\">                isSame = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; (isSame ? <span class=\"string\">&quot;true&quot;</span> : <span class=\"string\">&quot;false&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-二叉树的中序遍历\"><a class=\"anchor\" href=\"#2-二叉树的中序遍历\">#</a> 2: 二叉树的中序遍历</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-28-33.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _CRT_SECURE_NO_WARNINGS </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">constexpr</span> <span class=\"type\">int</span> MAXLEN = <span class=\"number\">10000</span>;</span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tnode</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tnode</span> *<span class=\"title\">left</span>=</span><span class=\"literal\">NULL</span>,*right=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;Tnode,*Tree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">changeStringToArray</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">int</span>* <span class=\"built_in\">array</span>, <span class=\"type\">int</span>* arrayLength)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span>* token = strtok(str, <span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (token != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(token, <span class=\"string\">&quot;null&quot;</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">array</span>[length++] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">array</span>[length++] = atoi(token);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        token = strtok(<span class=\"literal\">NULL</span>, <span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *arrayLength = length;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//层序创建树</span></span><br><span class=\"line\"></span><br><span class=\"line\">Tnode* <span class=\"title function_\">buildTree</span><span class=\"params\">(<span class=\"type\">int</span>* arr,<span class=\"type\">int</span> arrlen)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arrlen == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    Tnode* root = new Tnode;</span><br><span class=\"line\">    root-&gt;data = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Tnode*&gt; q;</span><br><span class=\"line\">    q.push(root);</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty() &amp;&amp; i &lt; arrlen) &#123;</span><br><span class=\"line\">        Tnode* cur = q.front();</span><br><span class=\"line\">        q.pop();</span><br><span class=\"line\">        <span class=\"comment\">// 处理左子节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; arrlen &amp;&amp; arr[i] != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cur-&gt;left = new Tnode;</span><br><span class=\"line\">            cur-&gt;left-&gt;data = arr[i];</span><br><span class=\"line\">            q.push(cur-&gt;left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 处理右子节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; arrlen &amp;&amp; arr[i] != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cur-&gt;right = new Tnode;</span><br><span class=\"line\">            cur-&gt;right-&gt;data = arr[i];</span><br><span class=\"line\">            q.push(cur-&gt;right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">pre</span><span class=\"params\">(Tree&amp; T,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; prelist)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (T == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pre(T-&gt;left,prelist);</span><br><span class=\"line\">    prelist.push_back(T-&gt;data);</span><br><span class=\"line\">    pre(T-&gt;right,prelist);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> str[MAXLEN];</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; str;</span><br><span class=\"line\">    <span class=\"type\">int</span> arr[MAXLEN];</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; prelist;</span><br><span class=\"line\">    <span class=\"type\">int</span> arrlen;</span><br><span class=\"line\">    changeStringToArray(str, arr, &amp;arrlen);</span><br><span class=\"line\">    Tree T;</span><br><span class=\"line\">    T=buildTree(arr,arrlen);</span><br><span class=\"line\">    pre(T,prelist);</span><br><span class=\"line\">    <span class=\"type\">bool</span> res = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; prelist.size()/<span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (prelist[i] != prelist[prelist.size() - i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            res = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;true&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;false&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-翻转二叉树\"><a class=\"anchor\" href=\"#3-翻转二叉树\">#</a> 3: 翻转二叉树</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-29-02.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _CRT_SECURE_NO_WARNINGS </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">constexpr</span> <span class=\"type\">int</span> MAXLEN = <span class=\"number\">10000</span>;</span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tnode</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tnode</span>* <span class=\"title\">left</span> =</span> <span class=\"literal\">NULL</span>, * right = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;Tnode, * Tree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">changeStringToArray</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">int</span>* <span class=\"built_in\">array</span>, <span class=\"type\">int</span>* arrayLength,<span class=\"type\">int</span>* nodenum)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span>* token = strtok(str, <span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (token != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(token, <span class=\"string\">&quot;null&quot;</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">array</span>[length++] = INT_MIN;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">array</span>[length++] = atoi(token);</span><br><span class=\"line\">            (*nodenum)++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        token = strtok(<span class=\"literal\">NULL</span>, <span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *arrayLength = length;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Tnode* <span class=\"title function_\">buildTree</span><span class=\"params\">(<span class=\"type\">int</span>* arr, <span class=\"type\">int</span> arrlen)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arrlen == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    Tnode* root = new Tnode;</span><br><span class=\"line\">    root-&gt;data = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Tnode*&gt; q;</span><br><span class=\"line\">    q.push(root);</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty() &amp;&amp; i &lt; arrlen) &#123;</span><br><span class=\"line\">        Tnode* cur = q.front();</span><br><span class=\"line\">        q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; arrlen &amp;&amp; arr[i] != INT_MIN) &#123;</span><br><span class=\"line\">            cur-&gt;left = new Tnode;</span><br><span class=\"line\">            cur-&gt;left-&gt;data = arr[i];</span><br><span class=\"line\">            q.push(cur-&gt;left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; arrlen &amp;&amp; arr[i] != INT_MIN) &#123;</span><br><span class=\"line\">            cur-&gt;right = new Tnode;</span><br><span class=\"line\">            cur-&gt;right-&gt;data = arr[i];</span><br><span class=\"line\">            q.push(cur-&gt;right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(Tree T)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (T == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Tnode* temp = T-&gt;left;</span><br><span class=\"line\">    T-&gt;left = T-&gt;right;</span><br><span class=\"line\">    T-&gt;right = temp;</span><br><span class=\"line\">    swap(T-&gt;left);</span><br><span class=\"line\">    swap(T-&gt;right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">levelprint</span><span class=\"params\">(Tree T, <span class=\"type\">int</span> arrlen)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (T == <span class=\"literal\">NULL</span> || arrlen == <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Tnode*&gt; tree;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"type\">int</span>&gt; output;</span><br><span class=\"line\">    tree.push(T);</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!tree.empty() &amp;&amp; i &lt; arrlen) &#123;</span><br><span class=\"line\">        Tnode* t = tree.front();</span><br><span class=\"line\">        tree.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            output.push(INT_MIN);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            output.push(t-&gt;data);</span><br><span class=\"line\">            tree.push(t-&gt;left);</span><br><span class=\"line\">            tree.push(t-&gt;right);</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!output.empty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (output.front() == INT_MIN) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;null&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; output.front();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        output.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!output.empty()) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&#x27;,&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> str[MAXLEN];</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; str;</span><br><span class=\"line\">    <span class=\"type\">int</span> arr[MAXLEN];</span><br><span class=\"line\">    <span class=\"type\">int</span> arrlen,nodenum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    changeStringToArray(str, arr, &amp;arrlen,&amp;nodenum);</span><br><span class=\"line\">    Tree T;</span><br><span class=\"line\">    T = buildTree(arr, arrlen);</span><br><span class=\"line\">    swap(T);</span><br><span class=\"line\">    levelprint(T, nodenum);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-左叶子之和\"><a class=\"anchor\" href=\"#4-左叶子之和\">#</a> 4: 左叶子之和</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-29-32.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _CRT_SECURE_NO_WARNINGS </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">constexpr</span> <span class=\"type\">int</span> MAXLEN = <span class=\"number\">10000</span>;</span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tnode</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"type\">int</span> type=<span class=\"number\">0</span>;<span class=\"comment\">//0为结点，1为左叶子，2为右叶子</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tnode</span> *<span class=\"title\">left</span>=</span><span class=\"literal\">NULL</span>,*right=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;Tnode,*Tree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">changeStringToArray</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">int</span>* <span class=\"built_in\">array</span>, <span class=\"type\">int</span>* arrayLength)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span>* token = strtok(str, <span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (token != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(token, <span class=\"string\">&quot;null&quot;</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">array</span>[length++] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">array</span>[length++] = atoi(token);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        token = strtok(<span class=\"literal\">NULL</span>, <span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *arrayLength = length;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//层序创建树</span></span><br><span class=\"line\">Tnode* <span class=\"title function_\">buildTree</span><span class=\"params\">(<span class=\"type\">int</span>* arr,<span class=\"type\">int</span> arrlen)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arrlen == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    Tnode* root = new Tnode;</span><br><span class=\"line\">    root-&gt;data = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Tnode*&gt; q;</span><br><span class=\"line\">    q.push(root);</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty() &amp;&amp; i &lt; arrlen) &#123;</span><br><span class=\"line\">        Tnode* cur = q.front();</span><br><span class=\"line\">        q.pop();</span><br><span class=\"line\">        <span class=\"comment\">// 处理左子节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; arrlen &amp;&amp; arr[i] != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cur-&gt;left = new Tnode;</span><br><span class=\"line\">            cur-&gt;left-&gt;data = arr[i];</span><br><span class=\"line\">            cur-&gt;type = <span class=\"number\">0</span>;</span><br><span class=\"line\">            cur-&gt;left-&gt;type = <span class=\"number\">1</span>;</span><br><span class=\"line\">            q.push(cur-&gt;left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"comment\">// 处理右子节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; arrlen &amp;&amp; arr[i] != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cur-&gt;right = new Tnode;</span><br><span class=\"line\">            cur-&gt;right-&gt;data = arr[i];</span><br><span class=\"line\">            cur-&gt;type = <span class=\"number\">0</span>;</span><br><span class=\"line\">            cur-&gt;right-&gt;type = <span class=\"number\">2</span>;</span><br><span class=\"line\">            q.push(cur-&gt;right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">leftleafsum</span><span class=\"params\">(Tree&amp; T,<span class=\"type\">int</span>* sum)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (T == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    leftleafsum(T-&gt;left,sum);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (T-&gt;type == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        *sum += T-&gt;data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    leftleafsum(T-&gt;right,sum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> str[MAXLEN];</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; str;</span><br><span class=\"line\">    <span class=\"type\">int</span> arr[MAXLEN];</span><br><span class=\"line\">    <span class=\"type\">int</span> arrlen;</span><br><span class=\"line\">    changeStringToArray(str, arr, &amp;arrlen);</span><br><span class=\"line\">    Tree T;</span><br><span class=\"line\">    T=buildTree(arr,arrlen);</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    leftleafsum(T, &amp;sum);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; sum;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5-最小高度树\"><a class=\"anchor\" href=\"#5-最小高度树\">#</a> 5: 最小高度树</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-30-17.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _CRT_SECURE_NO_WARNINGS </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">constexpr</span> <span class=\"type\">int</span> MAXLEN = <span class=\"number\">10000</span>;</span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tnode</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tnode</span>* <span class=\"title\">left</span> =</span> <span class=\"literal\">NULL</span>, * right = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125; Tnode, * Tree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">changeStringToArray</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; <span class=\"built_in\">array</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span>* token = strtok(str, <span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (token != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(token, <span class=\"string\">&quot;null&quot;</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">array</span>.push_back(INT_MIN);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">array</span>.push_back(atoi(token));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        token = strtok(<span class=\"literal\">NULL</span>, <span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//二分法</span></span><br><span class=\"line\">Tnode* <span class=\"title function_\">build</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &gt; right) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = left + (right - left+<span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    Tnode* root = new Tnode;</span><br><span class=\"line\">    root-&gt;data = nums[mid];</span><br><span class=\"line\">    root-&gt;left = build(nums, left, mid - <span class=\"number\">1</span>);</span><br><span class=\"line\">    root-&gt;right = build(nums, mid + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">levelprint</span><span class=\"params\">(Tree T, <span class=\"type\">int</span> arrlen)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (T == <span class=\"literal\">NULL</span> || arrlen == <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Tnode*&gt; tree;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"type\">int</span>&gt; output;</span><br><span class=\"line\">    tree.push(T);</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!tree.empty() &amp;&amp; i &lt; arrlen) &#123;</span><br><span class=\"line\">        Tnode* t = tree.front();</span><br><span class=\"line\">        tree.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            output.push(INT_MIN);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            output.push(t-&gt;data);</span><br><span class=\"line\">            tree.push(t-&gt;left);</span><br><span class=\"line\">            tree.push(t-&gt;right);</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!output.empty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (output.front() == INT_MIN) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;null&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; output.front();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        output.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!output.empty()) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&#x27;,&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> str[MAXLEN];</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>.getline(str, MAXLEN);</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; arr;</span><br><span class=\"line\">    changeStringToArray(str, arr);</span><br><span class=\"line\">    <span class=\"type\">int</span> arrlen = arr.size();</span><br><span class=\"line\">    Tree T = build(arr, <span class=\"number\">0</span>, arrlen - <span class=\"number\">1</span>);</span><br><span class=\"line\">    levelprint(T, arrlen);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"6-填充每个节点的下一个右侧节点指针\"><a class=\"anchor\" href=\"#6-填充每个节点的下一个右侧节点指针\">#</a> 6: 填充每个节点的下一个右侧节点指针</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-30-52.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> val;</span><br><span class=\"line\">    Node* left;</span><br><span class=\"line\">    Node* right;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Node* <span class=\"title function_\">BuildTree</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; vec)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> _Print(Node* L);</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; vec;</span><br><span class=\"line\">    <span class=\"type\">char</span> c;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        c=<span class=\"built_in\">cin</span>.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;,&#x27;</span>)&#123;</span><br><span class=\"line\">            vec.push_back(s);</span><br><span class=\"line\">            s.clear();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;\\n&#x27;</span>)&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!s.empty())vec.push_back(s);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            s+=c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Node* L;</span><br><span class=\"line\">    L=BuildTree(vec);</span><br><span class=\"line\">    _Print(L);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Node* <span class=\"title function_\">BuildTree</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; vec)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Node*&gt; Q;</span><br><span class=\"line\">    Node* L=new Node;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(vec.size()==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    L-&gt;val=atoi(vec[<span class=\"number\">0</span>].c_str());</span><br><span class=\"line\">    L-&gt;left=L-&gt;right=<span class=\"number\">0</span>;</span><br><span class=\"line\">    Q.push(L);</span><br><span class=\"line\">    Node* p;</span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;vec.size())&#123;</span><br><span class=\"line\">        p=Q.front();</span><br><span class=\"line\">        Q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!p)&#123;</span><br><span class=\"line\">            i+=<span class=\"number\">2</span>;</span><br><span class=\"line\">            p=Q.front();</span><br><span class=\"line\">            Q.pop(); </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">2</span>;j++)&#123;</span><br><span class=\"line\">                Q.push(<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vec[i]==<span class=\"string\">&quot;#&quot;</span>)&#123;</span><br><span class=\"line\">            p-&gt;left=<span class=\"number\">0</span>;</span><br><span class=\"line\">            Q.push(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            Node* t=new Node;</span><br><span class=\"line\">            t-&gt;val=atoi(vec[i].c_str());</span><br><span class=\"line\">            t-&gt;left=t-&gt;right=<span class=\"number\">0</span>;</span><br><span class=\"line\">            p-&gt;left=t;</span><br><span class=\"line\">            Q.push(t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&gt;=vec.size())<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vec[i]==<span class=\"string\">&quot;#&quot;</span>)&#123;</span><br><span class=\"line\">            p-&gt;right=<span class=\"number\">0</span>;</span><br><span class=\"line\">            Q.push(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            Node* t=new Node;</span><br><span class=\"line\">            t-&gt;val=atoi(vec[i].c_str());</span><br><span class=\"line\">            t-&gt;left=t-&gt;right=<span class=\"number\">0</span>;</span><br><span class=\"line\">            p-&gt;right=t;</span><br><span class=\"line\">            Q.push(t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> _Print(Node* L)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L==<span class=\"number\">0</span>)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Node*&gt; Q;</span><br><span class=\"line\">    Q.push(L);</span><br><span class=\"line\">    <span class=\"type\">int</span> flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!Q.empty())&#123;</span><br><span class=\"line\">        Node* p;</span><br><span class=\"line\">        <span class=\"type\">int</span> a=Q.size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;a;i++)&#123;</span><br><span class=\"line\">            p=Q.front();</span><br><span class=\"line\">            Q.pop();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag)<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;,&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> flag=<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;p-&gt;val;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p-&gt;left)Q.push(p-&gt;left);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p-&gt;right)Q.push(p-&gt;right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;,&quot;</span>&lt;&lt;<span class=\"string\">&quot;#&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"7-二叉树的最近公共祖先\"><a class=\"anchor\" href=\"#7-二叉树的最近公共祖先\">#</a> 7: 二叉树的最近公共祖先</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-31-36.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _CRT_SECURE_NO_WARNINGS </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">constexpr</span> <span class=\"type\">int</span> MAXLEN = <span class=\"number\">10000</span>;</span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">changeStringToArray</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">int</span>* <span class=\"built_in\">array</span>, <span class=\"type\">int</span>* arrayLength)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> length = <span class=\"number\">1</span>;<span class=\"comment\">//跳过index=0</span></span><br><span class=\"line\">    <span class=\"type\">char</span>* token = strtok(str, <span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (token != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(token, <span class=\"string\">&quot;null&quot;</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">array</span>[length++] = INT_MIN;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">array</span>[length++] = atoi(token);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        token = strtok(<span class=\"literal\">NULL</span>, <span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *arrayLength = length<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">find_zuxian</span><span class=\"params\">(<span class=\"type\">int</span>* arr, <span class=\"type\">int</span> arrlen,<span class=\"type\">int</span> p,<span class=\"type\">int</span> q)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> indexp, indexq;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= arrlen; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[i] == p) &#123;</span><br><span class=\"line\">            indexp = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[i] == q) &#123;</span><br><span class=\"line\">            indexq = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; plist, qlist;</span><br><span class=\"line\">    plist.push_back(arr[indexp]), qlist.push_back(arr[indexq]);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (indexp &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        indexp /= <span class=\"number\">2</span>;</span><br><span class=\"line\">        plist.push_back(arr[indexp]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (indexq &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        indexq /= <span class=\"number\">2</span>;</span><br><span class=\"line\">        qlist.push_back(arr[indexq]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">bool</span> flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; (i &lt; plist.size())&amp;&amp;(!flag) ; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; qlist.size(); k++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (plist[i] == qlist[k]) &#123;</span><br><span class=\"line\">                res = plist[i];</span><br><span class=\"line\">                flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> str[MAXLEN];</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; str;</span><br><span class=\"line\">    <span class=\"type\">int</span> arr[MAXLEN];</span><br><span class=\"line\">    <span class=\"type\">int</span> arrlen=<span class=\"number\">0</span>;</span><br><span class=\"line\">    changeStringToArray(str, arr, &amp;arrlen);</span><br><span class=\"line\">    <span class=\"type\">int</span> p, q;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; p &gt;&gt; q;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;find_zuxian(arr,arrlen,p,q)&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"8-恢复二叉搜索树\"><a class=\"anchor\" href=\"#8-恢复二叉搜索树\">#</a> 8: 恢复二叉搜索树</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-32-12.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _CRT_SECURE_NO_WARNINGS </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">constexpr</span> <span class=\"type\">int</span> MAXLEN = <span class=\"number\">10000</span>;</span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tnode</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tnode</span>* <span class=\"title\">left</span> =</span> <span class=\"literal\">NULL</span>, * right = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125; Tnode, * Tree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">changeStringToArray</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">int</span>* <span class=\"built_in\">array</span>, <span class=\"type\">int</span>* arrayLength)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span>* token = strtok(str, <span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (token != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(token, <span class=\"string\">&quot;null&quot;</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">array</span>[length++] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">array</span>[length++] = atoi(token);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        token = strtok(<span class=\"literal\">NULL</span>, <span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *arrayLength = length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Tnode* <span class=\"title function_\">buildTree</span><span class=\"params\">(<span class=\"type\">int</span>* arr, <span class=\"type\">int</span> arrlen)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arrlen == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    Tnode* root = new Tnode;</span><br><span class=\"line\">    root-&gt;data = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Tnode*&gt; q;</span><br><span class=\"line\">    q.push(root);</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty() &amp;&amp; i &lt; arrlen) &#123;</span><br><span class=\"line\">        Tnode* cur = q.front();</span><br><span class=\"line\">        q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; arrlen &amp;&amp; arr[i] != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cur-&gt;left = new Tnode;</span><br><span class=\"line\">            cur-&gt;left-&gt;data = arr[i];</span><br><span class=\"line\">            q.push(cur-&gt;left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; arrlen &amp;&amp; arr[i] != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cur-&gt;right = new Tnode;</span><br><span class=\"line\">            cur-&gt;right-&gt;data = arr[i];</span><br><span class=\"line\">            q.push(cur-&gt;right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">inorder</span><span class=\"params\">(Tree T, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; <span class=\"built_in\">list</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (T == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    inorder(T-&gt;left, <span class=\"built_in\">list</span>);</span><br><span class=\"line\">    <span class=\"built_in\">list</span>.push_back(T-&gt;data);</span><br><span class=\"line\">    inorder(T-&gt;right, <span class=\"built_in\">list</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">modify</span><span class=\"params\">(Tree T, <span class=\"type\">int</span> indexm, <span class=\"type\">int</span> indexn, <span class=\"type\">int</span> m, <span class=\"type\">int</span> n, <span class=\"type\">int</span>* j)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (T == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    modify(T-&gt;left, indexm, indexn, m, n, j);</span><br><span class=\"line\">    (*j)++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*j == indexm) &#123;</span><br><span class=\"line\">        T-&gt;data = n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*j == indexn) &#123;</span><br><span class=\"line\">        T-&gt;data = m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    modify(T-&gt;right, indexm, indexn, m, n, j);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">levelprint</span><span class=\"params\">(Tree T,<span class=\"type\">int</span> arrlen)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (T == <span class=\"literal\">NULL</span>||arrlen==<span class=\"number\">0</span>) <span class=\"keyword\">return</span>; </span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;Tnode*&gt; tree;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"type\">int</span>&gt; output;</span><br><span class=\"line\">    tree.push(T);</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!tree.empty()&amp;&amp;i&lt;arrlen) &#123;</span><br><span class=\"line\">        Tnode* t = tree.front();</span><br><span class=\"line\">        tree.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            output.push(<span class=\"number\">-1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            output.push(t-&gt;data);</span><br><span class=\"line\">            tree.push(t-&gt;left);</span><br><span class=\"line\">            tree.push(t-&gt;right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!output.empty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (output.front() == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;null&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; output.front();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        output.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!output.empty()) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&#x27;,&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> str[MAXLEN];</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>.getline(str, MAXLEN);</span><br><span class=\"line\">    <span class=\"type\">int</span> arr[MAXLEN];</span><br><span class=\"line\">    <span class=\"type\">int</span> arrlen;</span><br><span class=\"line\">    changeStringToArray(str, arr, &amp;arrlen);</span><br><span class=\"line\">    Tree T = buildTree(arr, arrlen);</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"built_in\">list</span>;</span><br><span class=\"line\">    inorder(T, <span class=\"built_in\">list</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> first = <span class=\"number\">-1</span>, second = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">list</span>.size() - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>[i] &gt; <span class=\"built_in\">list</span>[i + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (first == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                first = i;      </span><br><span class=\"line\">                second = i + <span class=\"number\">1</span>; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                second = i + <span class=\"number\">1</span>; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (first != <span class=\"number\">-1</span> &amp;&amp; second != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        modify(T, first + <span class=\"number\">1</span>, second + <span class=\"number\">1</span>, <span class=\"built_in\">list</span>[first], <span class=\"built_in\">list</span>[second], &amp;j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    levelprint(T,arrlen);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"9-奇偶数\"><a class=\"anchor\" href=\"#9-奇偶数\">#</a> 9: 奇偶数</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-32-49.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _CRT_SECURE_NO_WARNINGS </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">constexpr</span> <span class=\"type\">int</span> MAXLEN = <span class=\"number\">10000</span>;</span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tnode</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tnode</span>* <span class=\"title\">left</span> =</span> <span class=\"literal\">NULL</span>, * right = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125; Tnode, * Tree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">changeStringToArray</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">int</span>* <span class=\"built_in\">array</span>, <span class=\"type\">int</span>* arrayLength)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span>* token = strtok(str, <span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (token != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(token, <span class=\"string\">&quot;null&quot;</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">array</span>[length++] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">array</span>[length++] = atoi(token);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        token = strtok(<span class=\"literal\">NULL</span>, <span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *arrayLength = length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">what_tree</span><span class=\"params\">(<span class=\"type\">int</span>* arr, <span class=\"type\">int</span> length)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (length == <span class=\"number\">0</span> || arr[<span class=\"number\">0</span>] == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> level = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"type\">int</span>&gt; q; </span><br><span class=\"line\">    q.push(<span class=\"number\">0</span>);    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty()) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> size = q.size();<span class=\"comment\">//每一层的节点个数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> prev = (level % <span class=\"number\">2</span> == <span class=\"number\">0</span>) ? INT_MIN : INT_MAX; </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> idx = q.front();</span><br><span class=\"line\">            q.pop();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[idx] == <span class=\"number\">-1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> val = arr[idx];</span><br><span class=\"line\">             <span class=\"keyword\">if</span> ((level % <span class=\"number\">2</span> == <span class=\"number\">0</span> &amp;&amp; val % <span class=\"number\">2</span> == <span class=\"number\">0</span>) || </span><br><span class=\"line\">                (level % <span class=\"number\">2</span> == <span class=\"number\">1</span> &amp;&amp; val % <span class=\"number\">2</span> == <span class=\"number\">1</span>) ||</span><br><span class=\"line\">                ((level % <span class=\"number\">2</span> == <span class=\"number\">0</span>) != (val &gt; prev))) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            prev = val;</span><br><span class=\"line\">            <span class=\"type\">int</span> left = <span class=\"number\">2</span> * idx + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> right = <span class=\"number\">2</span> * idx + <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left &lt; length) q.push(left);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (right &lt; length) q.push(right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        level++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> str[MAXLEN];</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>.getline(str, MAXLEN);</span><br><span class=\"line\">    <span class=\"type\">int</span> arr[MAXLEN];</span><br><span class=\"line\">    <span class=\"type\">int</span> arrlen;</span><br><span class=\"line\">    changeStringToArray(str, arr, &amp;arrlen);</span><br><span class=\"line\">    <span class=\"type\">bool</span> res = what_tree(arr, arrlen);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; (res ? <span class=\"string\">&quot;true&quot;</span> : <span class=\"string\">&quot;false&quot;</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"10-二叉树的子树大小\"><a class=\"anchor\" href=\"#10-二叉树的子树大小\">#</a> 10: 二叉树的子树大小</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-35-36.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tnode</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> left=<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> right=<span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;Tnode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sum</span><span class=\"params\">(<span class=\"type\">int</span> index,<span class=\"built_in\">vector</span>&lt;Tnode&gt; tree, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (tree[index].left != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\tnums[index]+=sum(tree[index].left, tree, nums);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (tree[index].right != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\tnums[index]+=sum(tree[index].right, tree, nums);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> nums[index];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">nums</span><span class=\"params\">(n+<span class=\"number\">1</span>,<span class=\"number\">1</span>)</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;Tnode&gt; <span class=\"title function_\">tree</span><span class=\"params\">(n+<span class=\"number\">1</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; tree[i].left;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; tree[i].right;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsum(<span class=\"number\">1</span>, tree, nums);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; nums.size(); i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; nums[i]&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"11-二叉树的子树和\"><a class=\"anchor\" href=\"#11-二叉树的子树和\">#</a> 11: 二叉树的子树和</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-36-33.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tnode</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> weight=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> left=<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> right=<span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;Tnode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">weightsum</span><span class=\"params\">(<span class=\"type\">int</span> index,<span class=\"built_in\">vector</span>&lt;Tnode&gt; tree, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; sum)</span> &#123;</span><br><span class=\"line\">\tsum[index] = tree[index].weight;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (tree[index].left != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\tsum[index]+=weightsum(tree[index].left, tree, sum);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (tree[index].right != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\tsum[index]+=weightsum(tree[index].right, tree, sum);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum[index];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">sum</span><span class=\"params\">(n+<span class=\"number\">1</span>,<span class=\"number\">0</span>)</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;Tnode&gt; <span class=\"title function_\">tree</span><span class=\"params\">(n+<span class=\"number\">1</span>)</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">\t\tTnode t;</span><br><span class=\"line\">\t\ttree.push_back(t);</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; tree[i].weight;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; tree[i].left;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; tree[i].right;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tweightsum(<span class=\"number\">1</span>, tree, sum);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; sum.size(); i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; sum[i]&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"12-确定树的形态\"><a class=\"anchor\" href=\"#12-确定树的形态\">#</a> 12: 确定树的形态</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-37-10.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">Postorder</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; pre, <span class=\"type\">const</span> <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; in)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pre.empty() || in.empty()) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> root_val = pre[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> root_it = find(in.begin(), in.end(), root_val);</span><br><span class=\"line\">    <span class=\"type\">int</span> left_size = distance(in.begin(), root_it);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">left_pre</span><span class=\"params\">(pre.begin() + <span class=\"number\">1</span>, pre.begin() + <span class=\"number\">1</span> + left_size)</span>;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">right_pre</span><span class=\"params\">(pre.begin() + <span class=\"number\">1</span> + left_size, pre.end())</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">left_in</span><span class=\"params\">(in.begin(), root_it)</span>;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">right_in</span><span class=\"params\">(root_it + <span class=\"number\">1</span>, in.end())</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; left_post = Postorder(left_pre, left_in);</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; right_post = Postorder(right_pre, right_in);</span><br><span class=\"line\"></span><br><span class=\"line\">    left_post.insert(left_post.end(), right_post.begin(), right_post.end());</span><br><span class=\"line\">    left_post.push_back(root_val);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> left_post;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">pre</span><span class=\"params\">(n)</span>, <span class=\"title function_\">in</span><span class=\"params\">(n)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) <span class=\"built_in\">cin</span> &gt;&gt; pre[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) <span class=\"built_in\">cin</span> &gt;&gt; in[i];</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; post = Postorder(pre, in);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; post.size(); ++i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; post[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != post.size() - <span class=\"number\">1</span>) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"13-哈夫曼叔的带权路径长\"><a class=\"anchor\" href=\"#13-哈夫曼叔的带权路径长\">#</a> 13: 哈夫曼叔的带权路径长</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-37-56.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"built_in\">priority_queue</span>&lt;<span class=\"type\">int</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;, greater&lt;<span class=\"type\">int</span>&gt;&gt; minHeap;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> weight;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; weight;</span><br><span class=\"line\">        minHeap.push(weight);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> WPL = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (minHeap.size() &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a = minHeap.top(); minHeap.pop();</span><br><span class=\"line\">        <span class=\"type\">int</span> b = minHeap.top(); minHeap.pop();</span><br><span class=\"line\">        <span class=\"type\">int</span> sum = a + b;</span><br><span class=\"line\">        WPL += sum;  <span class=\"comment\">// 关键：每次合并累加和</span></span><br><span class=\"line\">        minHeap.push(sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; WPL;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"查找排序\"><a class=\"anchor\" href=\"#查找排序\">#</a> 查找排序</h1>\n<h2 id=\"1-a-b数对\"><a class=\"anchor\" href=\"#1-a-b数对\">#</a> 1: A-B 数对</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-38-50.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Maxsize 1000</span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> val;</span><br><span class=\"line\">    <span class=\"type\">int</span> times;</span><br><span class=\"line\">    Node* next;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">table</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> size=Maxsize;</span><br><span class=\"line\">    Node* head;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n,c;</span><br><span class=\"line\">    <span class=\"type\">int</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;c;</span><br><span class=\"line\">    table* tal=new table;</span><br><span class=\"line\">    tal-&gt;head=new Node[Maxsize];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;Maxsize;i++)&#123;</span><br><span class=\"line\">        tal-&gt;head[i].next=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;a;</span><br><span class=\"line\">        Node* p=tal-&gt;head+a%Maxsize;</span><br><span class=\"line\">        <span class=\"type\">int</span> flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p-&gt;next)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p-&gt;next-&gt;val==a)&#123;</span><br><span class=\"line\">                p-&gt;next-&gt;times++;</span><br><span class=\"line\">                flag=<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                p=p-&gt;next; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag==<span class=\"number\">0</span>&amp;&amp;!p-&gt;next)&#123;</span><br><span class=\"line\">            Node* t=new Node;</span><br><span class=\"line\">            p-&gt;next=t;</span><br><span class=\"line\">            t-&gt;next=<span class=\"number\">0</span>;</span><br><span class=\"line\">            t-&gt;val=a;</span><br><span class=\"line\">            t-&gt;times=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;Maxsize;i++)&#123;</span><br><span class=\"line\">        Node* p=tal-&gt;head+i;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p-&gt;next)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> a=p-&gt;next-&gt;val;</span><br><span class=\"line\">            Node* t=tal-&gt;head+(i+c)%Maxsize;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(t-&gt;next)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(t-&gt;next-&gt;val==a+c)count+=p-&gt;next-&gt;times*t-&gt;next-&gt;times;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            p=p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;count;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-普通二叉树\"><a class=\"anchor\" href=\"#2-普通二叉树\">#</a> 2: 普通二叉树</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-39-23.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Searchranking</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; vec,<span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; vec.size(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vec[i] == val) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Searchnumber</span><span class=\"params\">(<span class=\"type\">int</span> rank, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; vec)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vec[rank - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">preindex</span><span class=\"params\">(<span class=\"type\">int</span> num, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; vec)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> max = <span class=\"number\">-2147483647</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; vec.size(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vec[i]&lt;num &amp;&amp; vec[i]&gt;max) max = vec[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">subindex</span><span class=\"params\">(<span class=\"type\">int</span> num, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; vec)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> min = <span class=\"number\">2147483647</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; vec.size(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vec[i]&gt;num &amp;&amp; vec[i]&lt;min) min = vec[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n,opnum,val;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; vec;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; opnums;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; vals;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; opnum &gt;&gt; val;</span><br><span class=\"line\">        opnums.push_back(opnum);</span><br><span class=\"line\">        vals.push_back(val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        opnum = opnums[i];</span><br><span class=\"line\">        val = vals[i];</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (opnum)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; Searchranking(vec, val) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; Searchnumber(val, vec) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; preindex(val, vec) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; subindex(val, vec) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">            vec.push_back(val);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-队列安排\"><a class=\"anchor\" href=\"#3-队列安排\">#</a> 3: 队列安排</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-40-21.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">insertloc</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> loc1;<span class=\"comment\">//插入位置邻居</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> loc2;<span class=\"comment\">//插入左右</span></span><br><span class=\"line\">&#125;insertloc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> state = <span class=\"number\">0</span>;<span class=\"comment\">//0表示未插入，1表示已插入，-1表示被删除</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> loc;</span><br><span class=\"line\">\t<span class=\"type\">int</span> id;</span><br><span class=\"line\">&#125;student;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Insert</span><span class=\"params\">(student* S, insertloc* insert, <span class=\"type\">int</span>* Del, <span class=\"type\">int</span> m,<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">\tS[<span class=\"number\">1</span>].loc = <span class=\"number\">1</span>, S[<span class=\"number\">1</span>].state = <span class=\"number\">1</span>, S[<span class=\"number\">1</span>].id = <span class=\"number\">1</span>;;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> start;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (insert[i].loc2 == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\tstart = S[insert[i].loc1].loc + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tS[i].loc = S[insert[i].loc1].loc + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tstart = S[insert[i].loc1].loc ;</span><br><span class=\"line\">\t\t\tS[i].loc = S[insert[i].loc1].loc;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">1</span>; k &lt;= n; k++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (S[k].state == <span class=\"number\">1</span> &amp;&amp; S[k].loc &gt;= start) &#123;</span><br><span class=\"line\">\t\t\t\tS[k].loc++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tS[i].state = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tS[i].id = i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">\t\tS[Del[i]].state = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sort</span><span class=\"params\">(student* S,<span class=\"type\">int</span> n)</span> &#123;<span class=\"comment\">//依旧冒泡</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> last = n;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (last&gt;<span class=\"number\">0</span>&amp;&amp;flag) &#123;</span><br><span class=\"line\">\t\tflag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; last;i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (S[i].loc &gt; S[i + <span class=\"number\">1</span>].loc) &#123;</span><br><span class=\"line\">\t\t\t\tstudent temp = S[i];</span><br><span class=\"line\">\t\t\t\tS[i] = S[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tS[i + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">\t\t\t\tflag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlast--;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">printlist</span><span class=\"params\">(student* S, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (S[i].state == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i == n) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; S[i].id &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; S[i].id &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> m,n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"number\">1</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tinsertloc* insert = new insertloc[n+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; insert[i].loc1;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; insert[i].loc2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; m;</span><br><span class=\"line\">\t<span class=\"type\">int</span>* Del = new <span class=\"type\">int</span>[m];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; Del[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tstudent* S = new student[n+<span class=\"number\">1</span>];</span><br><span class=\"line\">\tInsert(S, insert, Del, m, n);</span><br><span class=\"line\">\tsort(S, n);</span><br><span class=\"line\">\tprintlist(S, n);</span><br><span class=\"line\">\tdelete[] insert;</span><br><span class=\"line\">\tdelete[] Del;</span><br><span class=\"line\">\tdelete[] S;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-明明的随机数\"><a class=\"anchor\" href=\"#4-明明的随机数\">#</a> 4: 明明的随机数</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-40-59.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">delete_same</span><span class=\"params\">(<span class=\"type\">int</span> *input,<span class=\"type\">int</span> length)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> num = length;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; length; k++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (input[i] == input[k] &amp;&amp; i != k&amp;&amp;input[i]!=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\tinput[k] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\tnum--;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sort</span><span class=\"params\">(<span class=\"type\">int</span>* input, <span class=\"type\">int</span> length)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (length &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span>; </span><br><span class=\"line\">\t<span class=\"type\">bool</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> last = length - <span class=\"number\">1</span>; </span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (flag) &#123;</span><br><span class=\"line\">\t\tflag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; last; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (input[j] &gt; input[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> temp = input[j];</span><br><span class=\"line\">\t\t\t\tinput[j] = input[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tinput[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">\t\t\t\tflag = <span class=\"literal\">true</span>; </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlast--; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n, m;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"type\">int</span>* input = new <span class=\"type\">int</span>[n];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; input[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tm = delete_same(input, n);</span><br><span class=\"line\">\tsort(input, n);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; m &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n-m; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; input[i] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5-奖学金\"><a class=\"anchor\" href=\"#5-奖学金\">#</a> 5: 奖学金</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-41-43.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> c = <span class=\"number\">0</span>, id = <span class=\"number\">0</span>, S = <span class=\"number\">0</span>;<span class=\"comment\">//分别代表语文成绩，学号，总成绩</span></span><br><span class=\"line\">&#125;<span class=\"built_in\">list</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"built_in\">list</span>* student,<span class=\"type\">int</span> j)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> temp = student[j].S;</span><br><span class=\"line\">\tstudent[j].S = student[j + <span class=\"number\">1</span>].S;</span><br><span class=\"line\">\tstudent[j + <span class=\"number\">1</span>].S = temp;</span><br><span class=\"line\">\ttemp = student[j].c;</span><br><span class=\"line\">\tstudent[j].c = student[j + <span class=\"number\">1</span>].c;</span><br><span class=\"line\">\tstudent[j + <span class=\"number\">1</span>].c = temp;</span><br><span class=\"line\">\ttemp = student[j].id;</span><br><span class=\"line\">\tstudent[j].id = student[j + <span class=\"number\">1</span>].id;</span><br><span class=\"line\">\tstudent[j + <span class=\"number\">1</span>].id = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">ranking</span><span class=\"params\">(<span class=\"built_in\">list</span>* student, <span class=\"type\">int</span> num)</span> &#123;<span class=\"comment\">//冒泡排序</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"type\">bool</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> last = num;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (flag) &#123;<span class=\"comment\">//排好5个就可以结束</span></span><br><span class=\"line\">\t\tflag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt; last; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (student[j].S &gt; student[j + <span class=\"number\">1</span>].S) &#123;<span class=\"comment\">//按总成绩排名</span></span><br><span class=\"line\">\t\t\t\tswap(student, j);</span><br><span class=\"line\">\t\t\t\tflag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (student[j].S == student[j+<span class=\"number\">1</span>].S) &#123;<span class=\"comment\">//总成绩相等时，根据语文成绩排名</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (student[j].c &gt; student[j + <span class=\"number\">1</span>].c) &#123;</span><br><span class=\"line\">\t\t\t\t\tswap(student, j);</span><br><span class=\"line\">\t\t\t\t\tflag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (student[j].c == student[j+<span class=\"number\">1</span>].c) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (student[j].id &lt; student[j+<span class=\"number\">1</span>].id) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tswap(student, j);</span><br><span class=\"line\">\t\t\t\t\t\tflag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlast--;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>* student = new <span class=\"built_in\">list</span>[n+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> m, e;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; student[i].c;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; m;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; e;</span><br><span class=\"line\">\t\tstudent[i].id = i;</span><br><span class=\"line\">\t\tstudent[i].S = student[i].c + m + e;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tranking(student, n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n; i &gt; (n - <span class=\"number\">5</span>); i--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; student[i].id &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; student[i].S &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"6-纪念品分组\"><a class=\"anchor\" href=\"#6-纪念品分组\">#</a> 6: 纪念品分组</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-42-23.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> w, n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; w &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">prices</span><span class=\"params\">(n)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; prices[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sort(prices.begin(), prices.end());</span><br><span class=\"line\">    <span class=\"type\">int</span> left = <span class=\"number\">0</span>, right = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (prices[left] + prices[right] &lt;= w) &#123;</span><br><span class=\"line\">            left++;<span class=\"comment\">//如果我们找到价格最大的那个有符合条件的价格最小的，就分成一组</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        right--;<span class=\"comment\">//不管价格最大的那个能不能匹配到符合条件的价格最小的都要分成一组</span></span><br><span class=\"line\">        count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; count &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"7-统计数字\"><a class=\"anchor\" href=\"#7-统计数字\">#</a> 7: 统计数字</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-43-00.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"type\">constexpr</span> <span class=\"type\">int</span> MAXSIZE = <span class=\"number\">10000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">number</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> times = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;number;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tnumber* nums = new number[MAXSIZE];</span><br><span class=\"line\">\t<span class=\"type\">int</span> n,max=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"type\">int</span>* data = new <span class=\"type\">int</span>[n];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; data[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (max &lt; data[i]) &#123;</span><br><span class=\"line\">\t\t\tmax = data[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tnums[data[i]].times++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;=max; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (nums[i].times != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; nums[i].times &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"8-分数线划定\"><a class=\"anchor\" href=\"#8-分数线划定\">#</a> 8: 分数线划定</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-43-30.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Man</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> id;</span><br><span class=\"line\">    <span class=\"type\">int</span> score;</span><br><span class=\"line\">&#125;Man;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sort</span><span class=\"params\">(Man* arr, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">bool</span> swapped = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j].score &lt; arr[j + <span class=\"number\">1</span>].score) &#123;</span><br><span class=\"line\">                swap(arr[j], arr[j + <span class=\"number\">1</span>]);</span><br><span class=\"line\">                swapped = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[j].score == arr[j + <span class=\"number\">1</span>].score &amp;&amp; arr[j].id &gt; arr[j + <span class=\"number\">1</span>].id) &#123;</span><br><span class=\"line\">                swap(arr[j], arr[j + <span class=\"number\">1</span>]);</span><br><span class=\"line\">                swapped = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!swapped) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    Man* candi = new Man[n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; candi[i].id &gt;&gt; candi[i].score;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sort(candi, n);</span><br><span class=\"line\">    <span class=\"type\">int</span> lastone = (m * <span class=\"number\">3</span>) / <span class=\"number\">2</span> - <span class=\"number\">1</span>; </span><br><span class=\"line\">    lastone = min(lastone, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> lastscore = candi[lastone].score;</span><br><span class=\"line\">    <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (candi[i].score &gt;= lastscore) &#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; lastscore &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; count &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; candi[i].id &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; candi[i].score &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delete[] candi;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"9-合并果子\"><a class=\"anchor\" href=\"#9-合并果子\">#</a> 9: 合并果子</h2>\n<p><img data-src=\"PixPin_2025-06-18_18-44-05.jpg\" alt=\"alt text\" /><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">heap</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> quantity;</span><br><span class=\"line\">    <span class=\"type\">bool</span> type=<span class=\"literal\">false</span>;<span class=\"comment\">//true代表是非叶</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">sort</span><span class=\"params\">(heap* fruit, <span class=\"type\">int</span> end,<span class=\"type\">int</span> start)</span> &#123;<span class=\"comment\">//每次只需要排出最小的两个就可以了，动态更新果堆数</span></span><br><span class=\"line\">    <span class=\"type\">bool</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> last=start;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (last &lt; (start+<span class=\"number\">2</span>) &amp;&amp; flag) &#123;</span><br><span class=\"line\">        flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = end<span class=\"number\">-1</span> ; i &gt;last;i--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fruit[i].quantity &lt; fruit[i - <span class=\"number\">1</span>].quantity) &#123;</span><br><span class=\"line\">                heap temp = fruit[i];</span><br><span class=\"line\">                fruit[i] = fruit[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">                fruit[i - <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">                flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        last++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">HT</span><span class=\"params\">(heap* fruit, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> nodenums = <span class=\"number\">2</span> * n - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n<span class=\"number\">-1</span>; i++) &#123;<span class=\"comment\">//n-1次合并</span></span><br><span class=\"line\">        sort(fruit, n + i, <span class=\"number\">2</span> * i);</span><br><span class=\"line\">        fruit[n + i].quantity = fruit[<span class=\"number\">2</span> * i].quantity + fruit[<span class=\"number\">2</span> * i + <span class=\"number\">1</span>].quantity;</span><br><span class=\"line\">        fruit[n + i].type = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">    heap* fruit = new heap[<span class=\"number\">2</span>*n+<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; fruit[i].quantity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; fruit[<span class=\"number\">0</span>].quantity;</span><br><span class=\"line\">        delete[] fruit;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    HT(fruit, n);</span><br><span class=\"line\">    <span class=\"type\">int</span> cost=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span> * n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fruit[i].type) &#123;</span><br><span class=\"line\">            cost += fruit[i].quantity;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; cost &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    delete[] fruit;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://dragonftop.github.io/2025/06/08/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/",
            "url": "https://dragonftop.github.io/2025/06/08/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/",
            "title": "查找算法",
            "date_published": "2025-06-08T07:12:25.043Z",
            "content_html": "<h1 id=\"查找算法\"><a class=\"anchor\" href=\"#查找算法\">#</a> 查找算法</h1>\n<h2 id=\"顺序查找\"><a class=\"anchor\" href=\"#顺序查找\">#</a> 顺序查找</h2>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这里我们常用的顺序表一般是数组，但对于某些特殊的情况，我们可能需要自己定义变量类型</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">    keytype key;</span><br><span class=\"line\">    infotype info;</span><br><span class=\"line\">&#125;elemtype;<span class=\"comment\">//自定义结构体变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//顺序表结构</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">    elemtype *R;<span class=\"comment\">//存储地址开始位（基地址）</span></span><br><span class=\"line\">    <span class=\"type\">int</span> length;<span class=\"comment\">//当前长度</span></span><br><span class=\"line\">&#125;Stable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//一般顺序查找</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Search_seq</span><span class=\"params\">(Stable ST,keytype key)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=ST.length;i&gt;=<span class=\"number\">1</span>;i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ST.R[i].key==key)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//加入哨兵值的顺序表查找</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Search_seq</span><span class=\"params\">(Stable ST,keytype key)</span>&#123;</span><br><span class=\"line\">    ST.R[<span class=\"number\">0</span>].key=key;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=ST.length;ST.R[i].key!=key;--i);<span class=\"comment\">//这一步会在查找到目标关键字的时候存储下索引</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"折半查找\"><a class=\"anchor\" href=\"#折半查找\">#</a> 折半查找</h2>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如果原来的序列是有序的序列，则推荐使用折半查找</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">search_bin</span><span class=\"params\">(Stable ST,keyType key)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> low = <span class=\"number\">0</span>;<span class=\"type\">int</span> mid = <span class=\"number\">0</span>;<span class=\"type\">int</span> high = L.length<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(low&lt;=high)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tmid = (low+high)/<span class=\"number\">2</span>;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">if</span>(key==ST.R[mid].key)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(key&gt;ST.R[mid].key)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tlow = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\thigh = mid<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"分块查找\"><a class=\"anchor\" href=\"#分块查找\">#</a> 分块查找</h2>\n<hr />\n<p>在分块内部无序，但是分块间具有大小关系，就比如分为两个区快，区块 1 的全部元素的 key 都大于区块 2 中元素的关键字，但是两个区块内部没有顺序<br />\n思路：我们将每个分块内的最大 key 值找出，以该 key 标记该区块，由此根据查找的 key 值位于哪个区间来确定我们应该在哪个区块内进行查找<br />\n整体上：在确定分块的时候，使用二分查找；在区块内查找时，使用顺序查找。由此在一定程度上加快查找速度</p>\n",
            "tags": []
        },
        {
            "id": "https://dragonftop.github.io/2025/05/29/DFS%E5%92%8CBFS%E7%AE%97%E6%B3%95/",
            "url": "https://dragonftop.github.io/2025/05/29/DFS%E5%92%8CBFS%E7%AE%97%E6%B3%95/",
            "title": "",
            "date_published": "2025-05-29T11:28:57.965Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://dragonftop.github.io/2025/05/17/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",
            "url": "https://dragonftop.github.io/2025/05/17/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",
            "title": "排序算法",
            "date_published": "2025-05-17T07:16:44.911Z",
            "content_html": "<h1 id=\"常见的排序算法\"><a class=\"anchor\" href=\"#常见的排序算法\">#</a> 常见的排序算法</h1>\n<h2 id=\"简单选择排序\"><a class=\"anchor\" href=\"#简单选择排序\">#</a> 简单选择排序</h2>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">SelectSort</span><span class=\"params\">(SqList &amp;L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> min;<span class=\"type\">int</span> temp;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;L.length;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tmin=i;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i+<span class=\"number\">1</span>;j&lt;L.length;j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(L.data[j]&lt;L.data[min])min=j;</span><br><span class=\"line\">\t\t&#125;\t\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(min!=i)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\ttemp=L.data[min];</span><br><span class=\"line\">\t\t\tL.data[min]=L.data[i];</span><br><span class=\"line\">\t\t\tL.data[i]=temp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"直接插入排序\"><a class=\"anchor\" href=\"#直接插入排序\">#</a> 直接插入排序</h2>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//直接插入排序 升序排序</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InsertSort</span><span class=\"params\">(SqList &amp;L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> temp;<span class=\"type\">int</span> i,j;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=L.length;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(L.data[i]&lt;L.data[i<span class=\"number\">-1</span>])<span class=\"comment\">//比较有序表最后一个</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t\tL.data[<span class=\"number\">0</span>]=L.data[i];<span class=\"comment\">//放入哨兵中</span></span><br><span class=\"line\">\t\t\tL.data[i]=L.data[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(j=i<span class=\"number\">-2</span>;L.data[<span class=\"number\">0</span>]&lt;L.data[j];j--)<span class=\"comment\">//比较后移</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tL.data[j+<span class=\"number\">1</span>]=L.data[j];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tL.data[j+<span class=\"number\">1</span>]=L.data[<span class=\"number\">0</span>];<span class=\"comment\">//哨兵入列</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tPrintList(L);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"冒泡排序\"><a class=\"anchor\" href=\"#冒泡排序\">#</a> 冒泡排序</h2>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//冒泡排序 升序排序</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">BubbleSort</span><span class=\"params\">(SqList &amp;L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> m = L.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (m &gt; <span class=\"number\">0</span> &amp;&amp; flag == <span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tflag = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (L.data[j] &gt; L.data[j + <span class=\"number\">1</span>])</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tflag = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> temp = L.data[j];</span><br><span class=\"line\">\t\t\t\tL.data[j] = L.data[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tL.data[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t--m;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"快速排序\"><a class=\"anchor\" href=\"#快速排序\">#</a> 快速排序</h2>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//快速排序分割函数</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Partition</span><span class=\"params\">(SqList &amp;L,<span class=\"type\">int</span> low,<span class=\"type\">int</span> high)</span></span><br><span class=\"line\">&#123;\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> pivotekey = L.data[low]; <span class=\"comment\">//保存枢轴</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (low&lt;high)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (low &lt; high&amp;&amp;L.data[high] &gt;= pivotekey) --high;</span><br><span class=\"line\">\t\tL.data[low] = L.data[high];</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (low &lt; high&amp;&amp;L.data[low] &lt;= pivotekey) ++low;</span><br><span class=\"line\">\t\tL.data[high] = L.data[low];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tL.data[low] = pivotekey;</span><br><span class=\"line\">\tPrintList(L);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> low;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 快速排序 升序</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">QuickSort</span><span class=\"params\">(SqList &amp;L, <span class=\"type\">int</span> low, <span class=\"type\">int</span> high)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (low &lt; high)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> pivotloc = Partition(L,low,high);</span><br><span class=\"line\">\t\tQuickSort(L,low,pivotloc<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\tQuickSort(L, pivotloc + <span class=\"number\">1</span>, high);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://dragonftop.github.io/2025/05/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%A2%98%E5%BA%93WP/",
            "url": "https://dragonftop.github.io/2025/05/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%A2%98%E5%BA%93WP/",
            "title": "数据结构wrtie_up",
            "date_published": "2025-05-11T12:22:15.749Z",
            "content_html": "<h1 id=\"数据结构\"><a class=\"anchor\" href=\"#数据结构\">#</a> <strong>数据结构</strong></h1>\n<h2 id=\"数组与串-液晶屏\"><a class=\"anchor\" href=\"#数组与串-液晶屏\">#</a> <strong>数组与串 - 液晶屏</strong></h2>\n<hr />\n<p><strong>题目：</strong><br />\n<img data-src=\"PixPin_2025-05-17_14-25-12.jpg\" alt=\"alt text\" /><br />\n<strong> 输入输出要求</strong>：<br />\n<img data-src=\"PixPin_2025-05-17_14-28-05.jpg\" alt=\"alt text\" /><br />\n<strong> 我的代码：</strong><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* op = new <span class=\"type\">char</span>[<span class=\"number\">5</span>*n];</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> str;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; str;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (str[i]) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;0&#x27;</span>:</span><br><span class=\"line\">\t\t\top[i] = <span class=\"number\">1</span>, op[i + n] = <span class=\"number\">2</span>, op[i + <span class=\"number\">2</span> * n] = <span class=\"number\">2</span>, op[i + <span class=\"number\">3</span> * n] = <span class=\"number\">2</span>, op[i + <span class=\"number\">4</span> * n] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;1&#x27;</span>:</span><br><span class=\"line\">\t\t\top[i] = <span class=\"number\">3</span>, op[i + n] = <span class=\"number\">3</span>, op[i + <span class=\"number\">2</span> * n] = <span class=\"number\">3</span>, op[i + <span class=\"number\">3</span> * n] = <span class=\"number\">3</span>, op[i + <span class=\"number\">4</span> * n] = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;2&#x27;</span>:</span><br><span class=\"line\">\t\t\top[i] = <span class=\"number\">1</span>, op[i + n] = <span class=\"number\">3</span>, op[i + <span class=\"number\">2</span> * n] = <span class=\"number\">1</span>, op[i + <span class=\"number\">3</span> * n] = <span class=\"number\">4</span>, op[i + <span class=\"number\">4</span> * n] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;3&#x27;</span>:</span><br><span class=\"line\">\t\t\top[i] = <span class=\"number\">1</span>, op[i + n] = <span class=\"number\">3</span>, op[i + <span class=\"number\">2</span> * n] = <span class=\"number\">1</span>, op[i + <span class=\"number\">3</span> * n] = <span class=\"number\">3</span>, op[i + <span class=\"number\">4</span> * n] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;4&#x27;</span>:</span><br><span class=\"line\">\t\t\top[i] = <span class=\"number\">2</span>, op[i + n] = <span class=\"number\">2</span>, op[i + <span class=\"number\">2</span> * n] = <span class=\"number\">1</span>, op[i + <span class=\"number\">3</span> * n] = <span class=\"number\">3</span>, op[i + <span class=\"number\">4</span> * n] = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;5&#x27;</span>:</span><br><span class=\"line\">\t\t\top[i] = <span class=\"number\">1</span>, op[i + n] = <span class=\"number\">4</span>, op[i + <span class=\"number\">2</span> * n] = <span class=\"number\">1</span>, op[i + <span class=\"number\">3</span> * n] = <span class=\"number\">3</span>, op[i + <span class=\"number\">4</span> * n] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;6&#x27;</span>:</span><br><span class=\"line\">\t\t\top[i] = <span class=\"number\">1</span>, op[i + n] = <span class=\"number\">4</span>, op[i + <span class=\"number\">2</span> * n] = <span class=\"number\">1</span>, op[i + <span class=\"number\">3</span> * n] = <span class=\"number\">2</span>, op[i + <span class=\"number\">4</span> * n] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;7&#x27;</span>:</span><br><span class=\"line\">\t\t\top[i] = <span class=\"number\">1</span>, op[i + n] = <span class=\"number\">3</span>, op[i + <span class=\"number\">2</span> * n] = <span class=\"number\">3</span>, op[i + <span class=\"number\">3</span> * n] = <span class=\"number\">3</span>, op[i + <span class=\"number\">4</span> * n] = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;8&#x27;</span>:</span><br><span class=\"line\">\t\t\top[i] = <span class=\"number\">1</span>, op[i + n] = <span class=\"number\">2</span>, op[i + <span class=\"number\">2</span> * n] = <span class=\"number\">1</span>, op[i + <span class=\"number\">3</span> * n] = <span class=\"number\">2</span>, op[i + <span class=\"number\">4</span> * n] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;9&#x27;</span>:</span><br><span class=\"line\">\t\t\top[i] = <span class=\"number\">1</span>, op[i + n] = <span class=\"number\">2</span>, op[i + <span class=\"number\">2</span> * n] = <span class=\"number\">1</span>, op[i + <span class=\"number\">3</span> * n] = <span class=\"number\">3</span>, op[i + <span class=\"number\">4</span> * n] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span> * n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (op[i]) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;XXX&quot;</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;X.X&quot;</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;..X&quot;</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;X..&quot;</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((i + <span class=\"number\">1</span>) % n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&#x27;.&#x27;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n<strong> 总结： 由点阵想到了矩阵，所以利用了矩阵来存储对应每个数字的输出操作，从而形成了 op 数组，再将 op 数组进行解码输出，就达到了 “液晶屏” 的效果。</strong></p>\n<h2 id=\"数组与串-杨辉三角\"><a class=\"anchor\" href=\"#数组与串-杨辉三角\">#</a> <strong>数组与串 - 杨辉三角</strong></h2>\n<hr />\n<p><strong>题目：</strong><br />\n<img data-src=\"PixPin_2025-05-17_14-35-07.jpg\" alt=\"alt text\" /><br />\n<strong> 输入输出要求：</strong><br />\n<img data-src=\"PixPin_2025-05-17_14-36-03.jpg\" alt=\"alt text\" /><br />\n<strong> 我的代码：</strong><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"type\">int</span> *row = new <span class=\"type\">int</span>[n];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\trow[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i<span class=\"number\">-1</span>; j &gt; <span class=\"number\">0</span>;j--) &#123;</span><br><span class=\"line\">\t\t\t\trow[j] = row[j] + row[j<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt;= i; k++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; row[k]&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n<strong> 总结：想到了先将‘1’给定下来，所以我在对每一层进行操作的时候都会先令 row [i] = 1，由此每行的两端都确定是 1，然后再依据上一行的数据（我这里只用了一行的存储空间，可以将第 i 此处理后的数组看作是第 i+1 行的上一行的数据），从右往左进行 row [j] = row [j] + row [j-1] ，注意这里不能从左往右，否则存在数据丢失的问题。</strong></p>\n<h2 id=\"数组与串-n皇后\"><a class=\"anchor\" href=\"#数组与串-n皇后\">#</a> <strong>数组与串 - N 皇后</strong></h2>\n<hr />\n<p><strong>题目：</strong><br />\n<img data-src=\"PixPin_2025-05-17_14-39-36.jpg\" alt=\"alt text\" /><br />\n<strong> 输入输出要求：</strong><br />\n<img data-src=\"PixPin_2025-05-17_14-39-52.jpg\" alt=\"alt text\" /><br />\n<strong> 我的代码：</strong><br />\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> r, <span class=\"type\">int</span> n, <span class=\"type\">bool</span>* col, <span class=\"type\">bool</span>* diag1, <span class=\"type\">bool</span>* diag2, <span class=\"type\">int</span>* ans)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r == n) &#123;</span><br><span class=\"line\">        (*ans)++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> c = <span class=\"number\">0</span>; c &lt; n; c++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> rc = r - c + n - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!col[c] &amp;&amp; !diag1[r + c] &amp;&amp; !diag2[rc]) &#123;</span><br><span class=\"line\">            col[c] = diag1[r + c] = diag2[rc] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            dfs(r + <span class=\"number\">1</span>, n, col, diag1, diag2, ans);</span><br><span class=\"line\">            col[c] = diag1[r + c] = diag2[rc] = <span class=\"literal\">false</span>; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Nqueens</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">bool</span>* col = new <span class=\"type\">bool</span>[n]();</span><br><span class=\"line\">    <span class=\"type\">bool</span>* diag1 = new <span class=\"type\">bool</span>[<span class=\"number\">2</span> * n - <span class=\"number\">1</span>]();</span><br><span class=\"line\">    <span class=\"type\">bool</span>* diag2 = new <span class=\"type\">bool</span>[<span class=\"number\">2</span> * n - <span class=\"number\">1</span>]();</span><br><span class=\"line\"></span><br><span class=\"line\">    dfs(<span class=\"number\">0</span>, n, col, diag1, diag2, &amp;ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; Nqueens(n);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br />\n<strong> 总结：利用了递归算法，这里我采用行递归，列遍历的方式。其实就像求全排列一样，我们是在递归的过程中，剔除掉不合法的情况。本代码中的 dfs 函数中的 r 也就是行数，从 0<br />\n 开始，在递归中底价，同时列数 col 也在递归函数中有一个 for 循环遍历，这也就相当于一个对所有数据惊醒一个遍历，通过判断条件剔除掉不合法的数据（这里显然不合法的数据是指当遍历到 (a_{ij} )，若其他列或正反对角线上存在元素（用 bool 型数据表示），则为非法情况），若为非法情况，则回溯到该方案前，进入一下一种方案，不断持续到全部遍历完。</strong></p>\n",
            "tags": []
        },
        {
            "id": "https://dragonftop.github.io/2025/05/10/%E6%A0%91/",
            "url": "https://dragonftop.github.io/2025/05/10/%E6%A0%91/",
            "title": "二叉树",
            "date_published": "2025-05-10T08:12:59.642Z",
            "content_html": "<h1 id=\"二叉树\"><a class=\"anchor\" href=\"#二叉树\">#</a> <strong>&lt;二叉树&gt;</strong></h1>\n<h3 id=\"一-二叉树的存储结构\"><a class=\"anchor\" href=\"#一-二叉树的存储结构\">#</a> <strong>一、二叉树的存储结构</strong></h3>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tTElemType data;<span class=\"comment\">//数据域</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span> *<span class=\"title\">lchild</span>, *<span class=\"title\">rchild</span>;</span><span class=\"comment\">//左右孩子</span></span><br><span class=\"line\">&#125;BiTNode, *BiTree;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"二-二叉树的操作\"><a class=\"anchor\" href=\"#二-二叉树的操作\">#</a> <strong>二、二叉树的操作</strong></h3>\n<h4 id=\"1创建二叉树\"><a class=\"anchor\" href=\"#1创建二叉树\">#</a> 1. 创建二叉树</h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">InitTree</span><span class=\"params\">(BiTree &amp;T)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tTElemType a;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"number\">-1</span> == a) T = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tT = (BiTree)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t\tT-&gt;data = a;</span><br><span class=\"line\">\t\tInitTree(T-&gt;lchild);</span><br><span class=\"line\">\t\tInitTree(T-&gt;rchild);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2先序遍历\"><a class=\"anchor\" href=\"#2先序遍历\">#</a> <strong>2. 先序遍历</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PreOrder</span><span class=\"params\">(BiTree T)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (T != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, T-&gt;data);</span><br><span class=\"line\">\t\tPreOrder(T-&gt;lchild);<span class=\"comment\">//递归先序遍历左右子树</span></span><br><span class=\"line\">\t\tPreOrder(T-&gt;rchild);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3中序遍历\"><a class=\"anchor\" href=\"#3中序遍历\">#</a> <strong>3. 中序遍历</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InOrder</span><span class=\"params\">(BiTree T)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (T != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tInOrder(T-&gt;lchild);<span class=\"comment\">//递归中序遍历左右子树</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, T-&gt;data);</span><br><span class=\"line\">\t\tInOrder(T-&gt;rchild);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4后序遍历\"><a class=\"anchor\" href=\"#4后序遍历\">#</a> <strong>4. 后序遍历</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PostOrder</span><span class=\"params\">(BiTree T)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (T != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tPostOrder(T-&gt;lchild);<span class=\"comment\">//递归后序遍历左右子树</span></span><br><span class=\"line\">\t\tPostOrder(T-&gt;rchild);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, T-&gt;data);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5层序遍历\"><a class=\"anchor\" href=\"#5层序遍历\">#</a> <strong>5. 层序遍历</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">LevelOrder</span><span class=\"params\">(BiTree T)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">queue</span>&lt;BiTNode&gt; q;<span class=\"comment\">//借助队列</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (T != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tBiTNode temp;<span class=\"comment\">//暂存要出队的结点</span></span><br><span class=\"line\">\t\tq.push(*T);<span class=\"comment\">//根结点入队</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (!q.empty())<span class=\"comment\">//队列非空</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\ttemp = q.front();</span><br><span class=\"line\">\t\t\tq.pop();</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, temp.data);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (temp.lchild != <span class=\"literal\">NULL</span>) q.push(*temp.lchild);<span class=\"comment\">//队列先进先出，先入左孩子</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (temp.rchild != <span class=\"literal\">NULL</span>) q.push(*temp.rchild);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"三-完整可测试代码\"><a class=\"anchor\" href=\"#三-完整可测试代码\">#</a> <strong>三、完整可测试代码</strong></h3>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> TElemType int</span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"comment\">//链式二叉树数据结构</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tTElemType data;<span class=\"comment\">//数据域</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span> *<span class=\"title\">lchild</span>, *<span class=\"title\">rchild</span>;</span><span class=\"comment\">//左右孩子</span></span><br><span class=\"line\">&#125;BiTNode, *BiTree;</span><br><span class=\"line\"><span class=\"comment\">//********************************基本操作函数********************************//</span></span><br><span class=\"line\"><span class=\"comment\">//创建二叉树 规定数据域为-1，则为空 先序创建</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">InitTree</span><span class=\"params\">(BiTree &amp;T)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tTElemType a;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"number\">-1</span> == a) T = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tT = (BiTree)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t\tT-&gt;data = a;</span><br><span class=\"line\">\t\tInitTree(T-&gt;lchild);</span><br><span class=\"line\">\t\tInitTree(T-&gt;rchild);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//先序遍历-递归</span></span><br><span class=\"line\"><span class=\"comment\">//先序遍历 按照逻辑来说,执行这个函数前,应该进行逻辑判断（树是否为空），放在里面的话也没有else进行输出提示，不太好</span></span><br><span class=\"line\"><span class=\"comment\">//这里就按照课本敲代码了，在对应功能实现函数进行逻辑判断</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PreOrder</span><span class=\"params\">(BiTree T)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (T != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, T-&gt;data);</span><br><span class=\"line\">\t\tPreOrder(T-&gt;lchild);<span class=\"comment\">//递归先序遍历左右子树</span></span><br><span class=\"line\">\t\tPreOrder(T-&gt;rchild);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//中序遍历-递归</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InOrder</span><span class=\"params\">(BiTree T)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (T != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tInOrder(T-&gt;lchild);<span class=\"comment\">//递归中序遍历左右子树</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, T-&gt;data);</span><br><span class=\"line\">\t\tInOrder(T-&gt;rchild);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//后序遍历-递归</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PostOrder</span><span class=\"params\">(BiTree T)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (T != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tPostOrder(T-&gt;lchild);<span class=\"comment\">//递归后序遍历左右子树</span></span><br><span class=\"line\">\t\tPostOrder(T-&gt;rchild);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, T-&gt;data);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//层序遍历</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">LevelOrder</span><span class=\"params\">(BiTree T)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">queue</span>&lt;BiTNode&gt; q;<span class=\"comment\">//借助队列</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (T != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tBiTNode temp;<span class=\"comment\">//暂存要出队的结点</span></span><br><span class=\"line\">\t\tq.push(*T);<span class=\"comment\">//根结点入队</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (!q.empty())<span class=\"comment\">//队列非空</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\ttemp = q.front();</span><br><span class=\"line\">\t\t\tq.pop();</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, temp.data);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (temp.lchild != <span class=\"literal\">NULL</span>) q.push(*temp.lchild);<span class=\"comment\">//队列先进先出，先入左孩子</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (temp.rchild != <span class=\"literal\">NULL</span>) q.push(*temp.rchild);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//**********************************功能实现函数*****************************//</span></span><br><span class=\"line\"><span class=\"comment\">//调用InitTree</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">CreateBiTree</span><span class=\"params\">(BiTree &amp;T)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请按照先序遍历输入二叉树(-1无):&quot;</span>);</span><br><span class=\"line\">\tInitTree(T);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;二叉树先序遍历序列:&quot;</span>);</span><br><span class=\"line\">\tPreOrder(T);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//遍历功能函数 调用PreOrder InOrder PostOrder LevelOrder</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Traverse</span><span class=\"params\">(BiTree T)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> choice;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;********1.先序遍历    2.中序遍历*********\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;********3.后序遍历    4.层次遍历*********\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;********5.返回上一单元\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入菜单序号：\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;choice);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"number\">5</span> == choice) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (choice)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>: &#123;<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;二叉树先序遍历序列:&quot;</span>);PreOrder(T);<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);&#125;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>: &#123;<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;二叉树中序遍历序列:&quot;</span>);InOrder(T);<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);&#125;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>: &#123;<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;二叉树后序遍历序列:&quot;</span>);PostOrder(T);<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);&#125;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">4</span>: &#123;<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;二叉树层次遍历序列:&quot;</span>);LevelOrder(T);<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);&#125;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;输入错误！！！\\n&quot;</span>);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//菜单</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">menu</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;********1.创建    2.遍历*********\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;********3.退出\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//主函数</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tBiTree T = <span class=\"literal\">NULL</span>;<span class=\"type\">int</span> choice = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tmenu();</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入菜单序号：\\n&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;choice);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"number\">3</span> == choice) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (choice)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:CreateBiTree(T);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:Traverse(T);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;输入错误！！！\\n&quot;</span>);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://dragonftop.github.io/2025/05/02/%E8%A1%A8/",
            "url": "https://dragonftop.github.io/2025/05/02/%E8%A1%A8/",
            "title": "数据结构---线性表",
            "date_published": "2025-05-01T23:24:51.448Z",
            "content_html": "<h1 id=\"线性表\"><a class=\"anchor\" href=\"#线性表\">#</a> <strong>线性表</strong></h1>\n<h2 id=\"顺序表\"><a class=\"anchor\" href=\"#顺序表\">#</a> <strong>顺序表</strong></h2>\n<h3 id=\"一-顺序表的存储结构\"><a class=\"anchor\" href=\"#一-顺序表的存储结构\">#</a> <strong>一、顺序表的存储结构</strong></h3>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tElemType data[MaxSize];<span class=\"comment\">//顺序表元素</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> length;            <span class=\"comment\">//顺序表当前长度</span></span><br><span class=\"line\">&#125;SqList;</span><br><span class=\"line\"><span class=\"comment\">//其实就是定义了一个数组</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"二-顺序表的操作\"><a class=\"anchor\" href=\"#二-顺序表的操作\">#</a> <strong>二、顺序表的操作</strong></h3>\n<h4 id=\"1初始化\"><a class=\"anchor\" href=\"#1初始化\">#</a> <strong>1. 初始化</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"title function_\">InitList</span><span class=\"params\">(SqList &amp;L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(L.data, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(L));<span class=\"comment\">//初始化数据为0</span></span><br><span class=\"line\">\tL.length = <span class=\"number\">0</span>;                <span class=\"comment\">//初始化长度为0</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2创建顺序表\"><a class=\"anchor\" href=\"#2创建顺序表\">#</a> <strong>2. 创建顺序表</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">CreateList</span><span class=\"params\">(SqList &amp;L, <span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n&lt;<span class=\"number\">0</span> || n&gt;MaxSize)<span class=\"literal\">false</span>;<span class=\"comment\">//n非法</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i&lt;n; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;L.data[i]);</span><br><span class=\"line\">\t\tL.length++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;                        </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3在指定位置插入元素\"><a class=\"anchor\" href=\"#3在指定位置插入元素\">#</a> <strong>3. 在指定位置插入元素</strong></h4>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">InsertList</span><span class=\"params\">(SqList &amp;L, <span class=\"type\">int</span> i, ElemType e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i&lt;<span class=\"number\">1</span> || i&gt;L.length + <span class=\"number\">1</span>) <span class=\"comment\">//判断位置是否有效</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;位置无效！！！\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (L.length &gt;= MaxSize)<span class=\"comment\">//判断存储空间是否已满</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;当前存储空间已满！！！\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = L.length; j &gt;= i; j--)<span class=\"comment\">//位置i及之后元素后移</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tL.data[j] = L.data[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tL.data[i - <span class=\"number\">1</span>] = e;</span><br><span class=\"line\">\tL.length++;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//删除函数 删除位置i的元素 i之后的元素依次前移</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4删除指定位置元素\"><a class=\"anchor\" href=\"#4删除指定位置元素\">#</a> <strong>4. 删除指定位置元素</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span>  <span class=\"title function_\">ListDelete</span><span class=\"params\">(SqList &amp;L, <span class=\"type\">int</span> i)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i&lt;<span class=\"number\">1</span> || i&gt;L.length)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;位置无效！！！\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt;= L.length - <span class=\"number\">1</span>; j++)<span class=\"comment\">//位置i之后元素依次前移覆盖</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tL.data[j - <span class=\"number\">1</span>] = L.data[j];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tL.length--;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5查找元素\"><a class=\"anchor\" href=\"#5查找元素\">#</a> <strong>5. 查找元素</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">LocateElem</span><span class=\"params\">(SqList L, ElemType e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i&lt;L.length; i++)<span class=\"comment\">//从低位置查找</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (L.data[i] == e)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> i + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"6顺序表倒置\"><a class=\"anchor\" href=\"#6顺序表倒置\">#</a> <strong>6. 顺序表倒置</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Reverse</span><span class=\"params\">(SqList &amp;L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (L.length)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i&lt;L.length - <span class=\"number\">1</span> - i; i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> t = L.data[i];</span><br><span class=\"line\">\t\t\tL.data[i] = L.data[L.length - <span class=\"number\">1</span> - i];</span><br><span class=\"line\">\t\t\tL.data[L.length - <span class=\"number\">1</span> - i] = t;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"7奇偶分开排序\"><a class=\"anchor\" href=\"#7奇偶分开排序\">#</a> <strong>7. 奇偶分开排序</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Reverse</span><span class=\"params\">(SqList &amp;L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (L.length)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i&lt;L.length - <span class=\"number\">1</span> - i; i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> t = L.data[i];</span><br><span class=\"line\">\t\t\tL.data[i] = L.data[L.length - <span class=\"number\">1</span> - i];</span><br><span class=\"line\">\t\t\tL.data[L.length - <span class=\"number\">1</span> - i] = t;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//奇偶分开并排序</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">SplitSort</span><span class=\"params\">(SqList &amp;L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> Even = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> Odd = L.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> j = L.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">bool</span> flag = <span class=\"literal\">false</span>; <span class=\"comment\">// 交换标志</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (L.length)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (; i &lt; j; i++, j--)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (L.data[i] % <span class=\"number\">2</span> != <span class=\"number\">0</span> &amp;&amp; i&lt;L.length - <span class=\"number\">1</span>)i++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (L.data[j] % <span class=\"number\">2</span> == <span class=\"number\">0</span> &amp;&amp; j&gt;<span class=\"number\">0</span>)j--;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (L.data[i] % <span class=\"number\">2</span> == <span class=\"number\">0</span> &amp;&amp; L.data[j] % <span class=\"number\">2</span> != <span class=\"number\">0</span> &amp;&amp; i&lt;j)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> temp = L.data[i];</span><br><span class=\"line\">\t\t\t\tL.data[i] = L.data[j];</span><br><span class=\"line\">\t\t\t\tL.data[j] = temp;</span><br><span class=\"line\">\t\t\t\tflag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!flag) <span class=\"comment\">//没有交换</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (i &gt; j) &#123; <span class=\"comment\">// 恰好奇偶分开</span></span><br><span class=\"line\">\t\t\t\t\tEven = j;</span><br><span class=\"line\">\t\t\t\t\tOdd = i;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tEven = L.length - <span class=\"number\">1</span>;<span class=\"comment\">//全奇数</span></span><br><span class=\"line\">\t\t\t\t\tOdd = <span class=\"number\">0</span>; <span class=\"comment\">//全偶数</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (flag)<span class=\"comment\">//有交换</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i&lt;L.length; i++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (L.data[i] % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tOdd = i;</span><br><span class=\"line\">\t\t\t\tEven = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsort(L.data, L.data + Even + <span class=\"number\">1</span>);</span><br><span class=\"line\">\tsort(L.data + Odd, L.data + L.length);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"8清空顺序表\"><a class=\"anchor\" href=\"#8清空顺序表\">#</a> <strong>8. 清空顺序表</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">ClearList</span><span class=\"params\">(SqList &amp;L)</span> &#123;</span><br><span class=\"line\">\tL.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"三-完整可测试代码\"><a class=\"anchor\" href=\"#三-完整可测试代码\">#</a> <strong>三、完整可测试代码</strong></h3>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">Project: sequence_list(数据结构-顺序表)</span></span><br><span class=\"line\"><span class=\"comment\">Date:    2018/09/12  20191012修改 添加Reverse  20200819修改 添加ClearList</span></span><br><span class=\"line\"><span class=\"comment\">Author:  Frank Yu</span></span><br><span class=\"line\"><span class=\"comment\">CreateList(SqList &amp;L,int n) 参数：顺序表L，顺序表长度n 功能：创建长度为的顺序表 时间复杂度：O(n)</span></span><br><span class=\"line\"><span class=\"comment\">InitList(SqList &amp;L) 参数：顺序表L 功能：初始化 时间复杂度:O(1)</span></span><br><span class=\"line\"><span class=\"comment\">InsertList(SqList &amp;L,int i,ElemType e) 参数:顺序表L,位置i,元素e 功能：位置i处插入元素e 时间复杂度:O(n)</span></span><br><span class=\"line\"><span class=\"comment\">ListDelete(SqList &amp;L,int i) 参数:顺序表L,位置i 功能：删除位置i处元素 时间复杂度:O(n)</span></span><br><span class=\"line\"><span class=\"comment\">LocateElem(SqList L,ElemType e) 参数:顺序表L,元素e 功能：返回第一个等于e的元素的位置 时间复杂度:O(n)</span></span><br><span class=\"line\"><span class=\"comment\">Reverse(SqList &amp;L) 参数：顺序表L 倒置函数 将原顺序表直接倒置</span></span><br><span class=\"line\"><span class=\"comment\">PrintList(SqList L) 参数:顺序表L 功能：遍历L，并输出</span></span><br><span class=\"line\"><span class=\"comment\">SplitSort(SqList &amp;L) 参数：顺序表L 功能：分开奇偶，并分开排序</span></span><br><span class=\"line\"><span class=\"comment\">ClearList(SqList &amp;L) 参数：顺序表L 功能：清空顺序表</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 100</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ElemType int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Status int</span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"comment\">//顺序表数据结构</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tElemType data[MaxSize];<span class=\"comment\">//顺序表元素</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> length;            <span class=\"comment\">//顺序表当前长度</span></span><br><span class=\"line\">&#125;SqList;</span><br><span class=\"line\"><span class=\"comment\">//***************************基本操作函数*******************************//</span></span><br><span class=\"line\"><span class=\"comment\">//初始化顺序表函数，构造一个空的顺序表 </span></span><br><span class=\"line\">Status <span class=\"title function_\">InitList</span><span class=\"params\">(SqList &amp;L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(L.data, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(L));<span class=\"comment\">//初始化数据为0</span></span><br><span class=\"line\">\tL.length = <span class=\"number\">0</span>;                <span class=\"comment\">//初始化长度为0</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//创建顺序表函数 初始化前n个数据</span></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">CreateList</span><span class=\"params\">(SqList &amp;L, <span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n&lt;<span class=\"number\">0</span> || n&gt;MaxSize)<span class=\"literal\">false</span>;<span class=\"comment\">//n非法</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i&lt;n; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;L.data[i]);</span><br><span class=\"line\">\t\tL.length++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//插入函数 位置i插入数据 i及之后元素后移  1=&lt;i&lt;=length+1 </span></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">InsertList</span><span class=\"params\">(SqList &amp;L, <span class=\"type\">int</span> i, ElemType e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i&lt;<span class=\"number\">1</span> || i&gt;L.length + <span class=\"number\">1</span>) <span class=\"comment\">//判断位置是否有效</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;位置无效！！！\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (L.length &gt;= MaxSize)<span class=\"comment\">//判断存储空间是否已满</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;当前存储空间已满！！！\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = L.length; j &gt;= i; j--)<span class=\"comment\">//位置i及之后元素后移</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tL.data[j] = L.data[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tL.data[i - <span class=\"number\">1</span>] = e;</span><br><span class=\"line\">\tL.length++;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//删除函数 删除位置i的元素 i之后的元素依次前移</span></span><br><span class=\"line\"><span class=\"type\">bool</span>  <span class=\"title function_\">ListDelete</span><span class=\"params\">(SqList &amp;L, <span class=\"type\">int</span> i)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i&lt;<span class=\"number\">1</span> || i&gt;L.length)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;位置无效！！！\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt;= L.length - <span class=\"number\">1</span>; j++)<span class=\"comment\">//位置i之后元素依次前移覆盖</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tL.data[j - <span class=\"number\">1</span>] = L.data[j];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tL.length--;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//查找函数 按位置从小到大查找第一个值等于e的元素 并返回位置</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">LocateElem</span><span class=\"params\">(SqList L, ElemType e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i&lt;L.length; i++)<span class=\"comment\">//从低位置查找</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (L.data[i] == e)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> i + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//倒置函数 将原顺序表直接倒置</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Reverse</span><span class=\"params\">(SqList &amp;L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (L.length)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i&lt;L.length - <span class=\"number\">1</span> - i; i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> t = L.data[i];</span><br><span class=\"line\">\t\t\tL.data[i] = L.data[L.length - <span class=\"number\">1</span> - i];</span><br><span class=\"line\">\t\t\tL.data[L.length - <span class=\"number\">1</span> - i] = t;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//奇偶分开并排序</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">SplitSort</span><span class=\"params\">(SqList &amp;L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> Even = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> Odd = L.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> j = L.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">bool</span> flag = <span class=\"literal\">false</span>; <span class=\"comment\">// 交换标志</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (L.length)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (; i &lt; j; i++, j--)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (L.data[i] % <span class=\"number\">2</span> != <span class=\"number\">0</span> &amp;&amp; i&lt;L.length - <span class=\"number\">1</span>)i++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (L.data[j] % <span class=\"number\">2</span> == <span class=\"number\">0</span> &amp;&amp; j&gt;<span class=\"number\">0</span>)j--;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (L.data[i] % <span class=\"number\">2</span> == <span class=\"number\">0</span> &amp;&amp; L.data[j] % <span class=\"number\">2</span> != <span class=\"number\">0</span> &amp;&amp; i&lt;j)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> temp = L.data[i];</span><br><span class=\"line\">\t\t\t\tL.data[i] = L.data[j];</span><br><span class=\"line\">\t\t\t\tL.data[j] = temp;</span><br><span class=\"line\">\t\t\t\tflag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!flag) <span class=\"comment\">//没有交换</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (i &gt; j) &#123; <span class=\"comment\">// 恰好奇偶分开</span></span><br><span class=\"line\">\t\t\t\t\tEven = j;</span><br><span class=\"line\">\t\t\t\t\tOdd = i;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tEven = L.length - <span class=\"number\">1</span>;<span class=\"comment\">//全奇数</span></span><br><span class=\"line\">\t\t\t\t\tOdd = <span class=\"number\">0</span>; <span class=\"comment\">//全偶数</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (flag)<span class=\"comment\">//有交换</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i&lt;L.length; i++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (L.data[i] % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tOdd = i;</span><br><span class=\"line\">\t\t\t\tEven = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsort(L.data, L.data + Even + <span class=\"number\">1</span>);</span><br><span class=\"line\">\tsort(L.data + Odd, L.data + L.length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//清空顺序表</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">ClearList</span><span class=\"params\">(SqList &amp;L)</span> &#123;</span><br><span class=\"line\">\tL.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//********************************功能函数*****************************************//</span></span><br><span class=\"line\"><span class=\"comment\">//输出功能函数 按位置从小到大输出顺序表所有元素</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PrintList</span><span class=\"params\">(SqList L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;当前顺序表所有元素:&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i&lt;L.length; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, L.data[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//创建顺序表函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Create</span><span class=\"params\">(SqList &amp;L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n; <span class=\"type\">bool</span> flag;</span><br><span class=\"line\">\tL.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入要创建的顺序表长度(&gt;1):&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入%d个数（空格隔开）:&quot;</span>, n);</span><br><span class=\"line\">\tflag = CreateList(L, n);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;创建成功！\\n&quot;</span>);</span><br><span class=\"line\">\t\tPrintList(L);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;输入长度非法！\\n&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//插入功能函数 调用InsertList完成顺序表元素插入 调用PrintList函数显示插入成功后的结果</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Insert</span><span class=\"params\">(SqList &amp;L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> place; ElemType e; <span class=\"type\">bool</span> flag;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入要插入的位置(从1开始)及元素:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;place, &amp;e);</span><br><span class=\"line\">\tflag = InsertList(L, place, e);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (flag)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;插入成功！！！\\n&quot;</span>);</span><br><span class=\"line\">\t\tPrintList(L);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//删除功能函数 调用ListDelete函数完成顺序表的删除 调用PrintList函数显示插入成功后的结果</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delete</span><span class=\"params\">(SqList &amp;L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> place; <span class=\"type\">bool</span> flag;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入要删除的位置(从1开始):\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;place);</span><br><span class=\"line\">\tflag = ListDelete(L, place);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (flag)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;删除成功！！！\\n&quot;</span>);</span><br><span class=\"line\">\t\tPrintList(L);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//查找功能函数 调用LocateElem查找元素</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Search</span><span class=\"params\">(SqList L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tElemType e; <span class=\"type\">int</span> flag;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入要查找的值:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;e);</span><br><span class=\"line\">\tflag = LocateElem(L, e);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (flag)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;该元素位置为:%d\\n&quot;</span>, flag);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;未找到该元素！\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//菜单</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">menu</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;********1.创建                        2.插入*********\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;********3.删除                        4.查找*********\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;********5.倒置                        6.分奇偶排序***\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;********7.输出                        8.清空*********\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;********9.退出                              *********\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tSqList L; <span class=\"type\">int</span> choice;</span><br><span class=\"line\">\tInitList(L);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tmenu();</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入菜单序号：\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;choice);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"number\">9</span> == choice) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (choice)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:Create(L); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:Insert(L); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:Delete(L); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">4</span>:Search(L); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">5</span>:Reverse(L); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">6</span>:SplitSort(L); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">7</span>:PrintList(L); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">8</span>:ClearList(L); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;输入错误！！！\\n&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n 测试代码原文链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xhZHlfa2lsbGVyOS9hcnRpY2xlL2RldGFpbHMvODI2OTU3NzA=\">https://blog.csdn.net/lady_killer9/article/details/82695770</span></p>\n<h2 id=\"单链表\"><a class=\"anchor\" href=\"#单链表\">#</a> <strong>单链表</strong></h2>\n<h3 id=\"一-单链表的存储结构\"><a class=\"anchor\" href=\"#一-单链表的存储结构\">#</a> <strong>一、单链表的存储结构</strong></h3>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tElemType data;<span class=\"comment\">//数据域</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span> *<span class=\"title\">next</span>;</span><span class=\"comment\">//指针域</span></span><br><span class=\"line\">&#125;LNode,*LinkList;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"二-单链表的操作\"><a class=\"anchor\" href=\"#二-单链表的操作\">#</a> <strong>二、单链表的操作</strong></h3>\n<h4 id=\"1初始化-2\"><a class=\"anchor\" href=\"#1初始化-2\">#</a> <strong>1. 初始化</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"title function_\">InitList</span><span class=\"params\">(LinkList &amp;L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> L = new LNode;<span class=\"comment\">//生成头结点 这样删除等操作就不必分第一个结点和其他了</span></span><br><span class=\"line\"> L-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2获取链表长度\"><a class=\"anchor\" href=\"#2获取链表长度\">#</a> <strong>2. 获取链表长度</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ListLength</span><span class=\"params\">(LinkList L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tLinkList p=L;<span class=\"type\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t sum++;</span><br><span class=\"line\">\t p=p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum<span class=\"number\">-1</span>;<span class=\"comment\">//去除头结点</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3在指定位置插入元素-2\"><a class=\"anchor\" href=\"#3在指定位置插入元素-2\">#</a> <strong>3. 在指定位置插入元素</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">ListInsert</span><span class=\"params\">(LinkList &amp;L,<span class=\"type\">int</span> i,ElemType e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tLNode* s;LinkList p=L;<span class=\"type\">int</span> j=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p&amp;&amp;(j&lt;i<span class=\"number\">-1</span>))<span class=\"comment\">//j指到i-1位置或者p已经到最后时跳出</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t p=p-&gt;next;</span><br><span class=\"line\">\t ++j;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!p||j&gt;i<span class=\"number\">-1</span>)<span class=\"comment\">//i&lt;1或者i&gt;ListLength(L)+1时,插入位置无效 不调用ListLength,提高效率</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;插入位置无效！！！\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts=new LNode;</span><br><span class=\"line\">\ts-&gt;data=e;</span><br><span class=\"line\">\ts-&gt;next=p-&gt;next;</span><br><span class=\"line\">\tp-&gt;next=s;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4删除指定位置元素-2\"><a class=\"anchor\" href=\"#4删除指定位置元素-2\">#</a> <strong>4. 删除指定位置元素</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">ListDelete</span><span class=\"params\">(LinkList &amp;L,<span class=\"type\">int</span> i)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> \tLNode* s;LinkList p=L;<span class=\"type\">int</span> j=<span class=\"number\">0</span>;</span><br><span class=\"line\">\tLinkList q;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p&amp;&amp;(j&lt;i<span class=\"number\">-1</span>))<span class=\"comment\">//j指到i-1位置</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t p=p-&gt;next;</span><br><span class=\"line\">\t ++j;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p==nullptr||!(p-&gt;next) || j&gt;i - <span class=\"number\">1</span>)<span class=\"comment\">//i&lt;1或者i&gt;ListLength(L)时,删除位置无效</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;删除位置无效！！！\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tq=p-&gt;next;</span><br><span class=\"line\">\tp-&gt;next=q-&gt;next;</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(q);<span class=\"comment\">//释放空间</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5查找元素-2\"><a class=\"anchor\" href=\"#5查找元素-2\">#</a> <strong>5. 查找元素</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LNode *<span class=\"title function_\">LocateElem</span><span class=\"params\">(LinkList L,ElemType e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tLNode *p=L;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p&amp;&amp;(p-&gt;data!=e))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tp=p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"三-完整可测试代码-2\"><a class=\"anchor\" href=\"#三-完整可测试代码-2\">#</a> <strong>三、完整可测试代码</strong></h3>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    Project: single linkeed list (数据结构 单链表)</span></span><br><span class=\"line\"><span class=\"comment\">    Date:    2018/09/14</span></span><br><span class=\"line\"><span class=\"comment\">    Author:  Frank Yu</span></span><br><span class=\"line\"><span class=\"comment\">\tInitList(LinkList &amp;L) 参数：单链表L 功能：初始化 时间复杂度 O(1)</span></span><br><span class=\"line\"><span class=\"comment\">\tListLength(LinkList L) 参数：单链表L 功能：获得单链表长度 时间复杂度O(n) </span></span><br><span class=\"line\"><span class=\"comment\">\tListInsert(LinkList &amp;L,int i,ElemType e) 参数：单链表L,位置i，元素e 功能：位置i后插 时间复杂度O(n)[加入了查找]</span></span><br><span class=\"line\"><span class=\"comment\">\t                                        若已知指针p指向的后插 O(1)</span></span><br><span class=\"line\"><span class=\"comment\">\tListDelete(LinkList &amp;L,int i) 参数：单链表L，位置i 功能：删除位置i元素 时间复杂度O(n)[加入了查找] </span></span><br><span class=\"line\"><span class=\"comment\">\t                              若已知p指针指向的删除 最好是O(1),因为可以与后继结点交换数据域，然后删除后继结点。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\t  最坏是O(n),即从头查找p之前的结点,然后删除p所指结点</span></span><br><span class=\"line\"><span class=\"comment\">\tLocateElem(LinkList L,ElemType e) 参数：单链表L，元素e 功能：查找第一个等于e的元素，返回指针 时间复杂度O(n) </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Status int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ElemType int</span></span><br><span class=\"line\"><span class=\"comment\">//单链表结点数据结构</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tElemType data;<span class=\"comment\">//数据域</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span> *<span class=\"title\">next</span>;</span><span class=\"comment\">//指针域</span></span><br><span class=\"line\">&#125;LNode,*LinkList;</span><br><span class=\"line\"><span class=\"comment\">//**************************基本操作函数***************************//</span></span><br><span class=\"line\"><span class=\"comment\">//初始化函数</span></span><br><span class=\"line\">Status <span class=\"title function_\">InitList</span><span class=\"params\">(LinkList &amp;L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> L = new LNode;<span class=\"comment\">//生成头结点 这样删除等操作就不必分第一个结点和其他了</span></span><br><span class=\"line\"> L-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//获取单链表长度 头结点无数据，不算</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ListLength</span><span class=\"params\">(LinkList L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tLinkList p=L;<span class=\"type\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t sum++;</span><br><span class=\"line\">\t p=p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum<span class=\"number\">-1</span>;<span class=\"comment\">//去除头结点</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//插入函数--后插法 插入到第i(1&lt;=i&lt;=length+1)个位置 即i-1之后 不必区分i的位置</span></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">ListInsert</span><span class=\"params\">(LinkList &amp;L,<span class=\"type\">int</span> i,ElemType e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tLNode* s;LinkList p=L;<span class=\"type\">int</span> j=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p&amp;&amp;(j&lt;i<span class=\"number\">-1</span>))<span class=\"comment\">//j指到i-1位置或者p已经到最后时跳出</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t p=p-&gt;next;</span><br><span class=\"line\">\t ++j;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!p||j&gt;i<span class=\"number\">-1</span>)<span class=\"comment\">//i&lt;1或者i&gt;ListLength(L)+1时,插入位置无效 不调用ListLength,提高效率</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;插入位置无效！！！\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts=new LNode;</span><br><span class=\"line\">\ts-&gt;data=e;</span><br><span class=\"line\">\ts-&gt;next=p-&gt;next;</span><br><span class=\"line\">\tp-&gt;next=s;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//删除函数 删除位置i的结点 即删除i-1之后的结点</span></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">ListDelete</span><span class=\"params\">(LinkList &amp;L,<span class=\"type\">int</span> i)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> \tLNode* s;LinkList p=L;<span class=\"type\">int</span> j=<span class=\"number\">0</span>;</span><br><span class=\"line\">\tLinkList q;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p&amp;&amp;(j&lt;i<span class=\"number\">-1</span>))<span class=\"comment\">//j指到i-1位置</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t p=p-&gt;next;</span><br><span class=\"line\">\t ++j;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p==nullptr||!(p-&gt;next) || j&gt;i - <span class=\"number\">1</span>)<span class=\"comment\">//i&lt;1或者i&gt;ListLength(L)时,删除位置无效</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;删除位置无效！！！\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tq=p-&gt;next;</span><br><span class=\"line\">\tp-&gt;next=q-&gt;next;</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(q);<span class=\"comment\">//释放空间</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//查找函数 按值查找 查找第一个等于e的结点 成功返回该结点指针，否则返回NULL</span></span><br><span class=\"line\">LNode *<span class=\"title function_\">LocateElem</span><span class=\"params\">(LinkList L,ElemType e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tLNode *p=L;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p&amp;&amp;(p-&gt;data!=e))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tp=p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//**************************功能实现函数**************************//</span></span><br><span class=\"line\"><span class=\"comment\">//遍历输出函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PrintList</span><span class=\"params\">(LinkList L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tLinkList p=L-&gt;next;<span class=\"comment\">//跳过头结点</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ListLength(L))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;当前单链表所有元素:&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(p)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,p-&gt;data);</span><br><span class=\"line\">\t\t\tp=p-&gt;next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;当前单链表已空！\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//插入功能函数 调用ListInsert后插</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Insert</span><span class=\"params\">(LinkList &amp;L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> place;ElemType e;<span class=\"type\">bool</span> flag;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入要插入的位置(从1开始)及元素:\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;place,&amp;e);</span><br><span class=\"line\">  flag=ListInsert(L,place,e);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(flag) </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;插入成功！！！\\n&quot;</span>);</span><br><span class=\"line\">\tPrintList(L);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//删除功能函数 调用ListDelete删除</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delete</span><span class=\"params\">(LinkList L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> place;<span class=\"type\">bool</span> flag;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入要删除的位置(从1开始):\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;place);</span><br><span class=\"line\">  flag=ListDelete(L,place);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(flag) </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;删除成功！！！\\n&quot;</span>);</span><br><span class=\"line\">\tPrintList(L);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//查找功能函数 调用LocateElem查找</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Search</span><span class=\"params\">(LinkList L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ElemType e;LNode *q;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入要查找的值:\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;e);</span><br><span class=\"line\">  q=LocateElem(L,e);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(q) </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;找到该元素！\\n&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;未找到该元素！\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//菜单</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">menu</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;********1.后插    2.删除*********\\n&quot;</span>);</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;********3.查找    4.输出*********\\n&quot;</span>);</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;********5.退出          *********\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//主函数</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> LinkList L;<span class=\"type\">int</span> choice;</span><br><span class=\"line\"> InitList(L);</span><br><span class=\"line\"> <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  menu();</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入菜单序号：\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;choice);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(choice==<span class=\"number\">5</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(choice)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">1</span>:Insert(L);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">2</span>:Delete(L);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">3</span>:Search(L);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">4</span>:PrintList(L);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;输入错误！！！\\n&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;                       </span><br></pre></td></tr></table></figure><br />\n 测试代码原文链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xhZHlfa2lsbGVyOS9hcnRpY2xlL2RldGFpbHMvODI3MDA3NDM=\">https://blog.csdn.net/lady_killer9/article/details/82700743</span></p>\n",
            "tags": []
        },
        {
            "id": "https://dragonftop.github.io/2025/04/15/%E9%98%9F%E5%88%97/",
            "url": "https://dragonftop.github.io/2025/04/15/%E9%98%9F%E5%88%97/",
            "title": "数据结构-队列(循环队列)",
            "date_published": "2025-04-15T11:13:44.853Z",
            "content_html": "<h1 id=\"队列\"><a class=\"anchor\" href=\"#队列\">#</a> <strong>队列</strong></h1>\n<h2 id=\"循环队列\"><a class=\"anchor\" href=\"#循环队列\">#</a> <strong>循环队列</strong></h2>\n<h3 id=\"一-队列的存储结构\"><a class=\"anchor\" href=\"#一-队列的存储结构\">#</a> <strong>一、队列的存储结构</strong></h3>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tQElemType data[MaxQSize];<span class=\"comment\">//数据域</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> front,rear;          <span class=\"comment\">//队头队尾指针</span></span><br><span class=\"line\">    <span class=\"type\">int</span> length;<span class=\"comment\">//这里我自己觉得再加一个length数据更有利于循环队列的使用</span></span><br><span class=\"line\">    <span class=\"type\">int</span> state;</span><br><span class=\"line\">    <span class=\"comment\">// 由于当front和rear重合时不能直接判断队列满还是空</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里可以写一个state变量来作为队列的状态变量，例如：state=0,队列空，state=1，队列满</span></span><br><span class=\"line\">&#125;SqQueue;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"二-队列的操作\"><a class=\"anchor\" href=\"#二-队列的操作\">#</a> <strong>二、队列的操作</strong></h3>\n<hr />\n<h4 id=\"1初始化\"><a class=\"anchor\" href=\"#1初始化\">#</a> <strong>1. 初始化</strong></h4>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitQueue</span><span class=\"params\">(SqQueue &amp;Q,<span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tQ.front=Q.rear=<span class=\"number\">0</span>;</span><br><span class=\"line\">    Q.length=len;</span><br><span class=\"line\">    Q.state=<span class=\"number\">0</span>;<span class=\"comment\">//初始化为默认为空。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2判断是否空\"><a class=\"anchor\" href=\"#2判断是否空\">#</a> <strong>2. 判断是否空</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">QueueEmpty</span><span class=\"params\">(SqQueue Q)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(Q.front!=Q.rear&amp;&amp;Q.state==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3判断是否满\"><a class=\"anchor\" href=\"#3判断是否满\">#</a> <strong>3. 判断是否满</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">QueueFull</span><span class=\"params\">(SqQueue Q)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q.front==Q.rear&amp;&amp;Q.state==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4入队列\"><a class=\"anchor\" href=\"#4入队列\">#</a> <strong>4. 入队列</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">EnQueue</span><span class=\"params\">(SqQueue &amp;Q,QElemType e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(QueueFull(Q))&#123;</span><br><span class=\"line\">        Q.data[Q.rear]=e;</span><br><span class=\"line\">\tQ.rear=(Q.rear+<span class=\"number\">1</span>)%Q.length;<span class=\"comment\">//指针加1 取模</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q.front==Q.rear)&#123;</span><br><span class=\"line\">        Q.state=<span class=\"number\">1</span>;<span class=\"comment\">//判定队列是否刚好满</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5出队列\"><a class=\"anchor\" href=\"#5出队列\">#</a> <strong>5. 出队列</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">DeQueue</span><span class=\"params\">(SqQueue &amp;Q,QElemType &amp;e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!QueueEmpty(Q))&#123;</span><br><span class=\"line\">        e=Q.data[Q.front];</span><br><span class=\"line\">\t    Q.front=(Q.front+<span class=\"number\">1</span>)%Q.length;</span><br><span class=\"line\">    &#125;                               </span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(Q.front==Q.rear)&#123;</span><br><span class=\"line\">        Q.state=<span class=\"number\">0</span>;<span class=\"comment\">//判定队列是否刚好为空</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"6取队首元素\"><a class=\"anchor\" href=\"#6取队首元素\">#</a> <strong>6. 取队首元素</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">GetHead</span><span class=\"params\">(SqQueue &amp;Q,QElemType e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!QueueEmpty(Q))&#123;</span><br><span class=\"line\">        e=Q.data[Q.front];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"链队\"><a class=\"anchor\" href=\"#链队\">#</a> <strong>链队</strong></h2>\n<h3 id=\"链队的存储结构\"><a class=\"anchor\" href=\"#链队的存储结构\">#</a> <strong>链队的存储结构</strong></h3>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">QNode</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tQElemType data;<span class=\"comment\">//数据域</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">QNode</span> *<span class=\"title\">next</span>;</span><span class=\"comment\">//指针域</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;QNode,*QueuePtr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">QNode</span> *<span class=\"title\">front</span>,*<span class=\"title\">rear</span>;</span></span><br><span class=\"line\">&#125;LinkQueue;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"链队的操作\"><a class=\"anchor\" href=\"#链队的操作\">#</a> <strong>链队的操作</strong></h3>\n<h4 id=\"1初始化-2\"><a class=\"anchor\" href=\"#1初始化-2\">#</a> <strong>1. 初始化</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitQueue</span><span class=\"params\">(LinkQueue &amp;Q)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tQ.front=Q.rear=new QNode;<span class=\"comment\">//生成新节点作为头结点，队头队尾指针均指向它</span></span><br><span class=\"line\">\tQ.front-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2入队列\"><a class=\"anchor\" href=\"#2入队列\">#</a> <strong>2. 入队列</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">EnQueue</span><span class=\"params\">(LinkQueue &amp;Q,QElemType e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tQNode *p;</span><br><span class=\"line\">\tp = new QNode;<span class=\"comment\">//生成新节点</span></span><br><span class=\"line\">\tp-&gt;data=e;    <span class=\"comment\">//赋值</span></span><br><span class=\"line\">\tp-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tQ.rear-&gt;next=p;<span class=\"comment\">//加入队尾</span></span><br><span class=\"line\">\tQ.rear=p;      <span class=\"comment\">//尾指针后移</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3出队列\"><a class=\"anchor\" href=\"#3出队列\">#</a> <strong>3. 出队列</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">DeQueue</span><span class=\"params\">(LinkQueue &amp;Q,QElemType &amp;e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tQueuePtr p;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(Q.front==Q.rear)<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//队空</span></span><br><span class=\"line\">\te=Q.front-&gt;next-&gt;data;           <span class=\"comment\">//e返回值 之前写的Q.front-&gt;data 炸了，头结点没数据的，一定要注意头结点</span></span><br><span class=\"line\">\tp=Q.front-&gt;next;                <span class=\"comment\">//保留，一会儿释放空间</span></span><br><span class=\"line\">\tQ.front-&gt;next=p-&gt;next;          <span class=\"comment\">//出队,注意Q.front-&gt;next 不是Q.front 还有头结点</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(Q.rear==p)Q.rear=Q.front;    <span class=\"comment\">//最后一个元素出队，rear指向头结点</span></span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4取队首元素\"><a class=\"anchor\" href=\"#4取队首元素\">#</a> <strong>4. 取队首元素</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">GetHead</span><span class=\"params\">(LinkQueue &amp;Q,QElemType &amp;e)</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(Q.front==Q.rear) <span class=\"keyword\">return</span> ;<span class=\"comment\">//队列为空</span></span><br><span class=\"line\">\te=Q.front-&gt;next-&gt;data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//其实与链表有关的操作，只需要结合这个结构自身存储形式与链表的操作就好了</span></span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://dragonftop.github.io/2025/04/13/%E6%A0%88/",
            "url": "https://dragonftop.github.io/2025/04/13/%E6%A0%88/",
            "title": "数据结构---栈",
            "date_published": "2025-04-13T12:27:28.617Z",
            "content_html": "<h1 id=\"栈\"><a class=\"anchor\" href=\"#栈\">#</a> <strong>&lt;栈&gt;</strong></h1>\n<h2 id=\"-顺序栈-\"><a class=\"anchor\" href=\"#-顺序栈-\">#</a> <strong>- 顺序栈 -</strong></h2>\n<h3 id=\"一-顺序栈的数据结构\"><a class=\"anchor\" href=\"#一-顺序栈的数据结构\">#</a> <strong>一、顺序栈的数据结构</strong></h3>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Stack</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tSElemType *base;<span class=\"comment\">//栈底指针 不变</span></span><br><span class=\"line\">\tSElemType *top;<span class=\"comment\">//栈顶指针 一直在栈顶元素上一个位置</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> stacksize;<span class=\"comment\">//栈可用的最大容量</span></span><br><span class=\"line\">&#125;SqStack;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"二-顺序栈的操作\"><a class=\"anchor\" href=\"#二-顺序栈的操作\">#</a> <strong>二、顺序栈的操作</strong></h3>\n<hr />\n<h4 id=\"1-入栈\"><a class=\"anchor\" href=\"#1-入栈\">#</a> <strong>1. 入栈</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//入栈</span></span><br><span class=\"line\">Status <span class=\"title function_\">Push</span><span class=\"params\">(SqStack &amp;s,SElemType e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(s.top-s.base==s.stacksize) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"comment\">//栈满</span></span><br><span class=\"line\">\t*(s.top++)=e;<span class=\"comment\">//先入栈，栈顶指针再上移 注意与王道上的不同，具体问题具体分析</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-出栈\"><a class=\"anchor\" href=\"#2-出栈\">#</a> <strong>2. 出栈</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//出栈 用e返回值</span></span><br><span class=\"line\">Status <span class=\"title function_\">Pop</span><span class=\"params\">(SqStack &amp;s,SElemType &amp;e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(s.top==s.base) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"comment\">//栈空</span></span><br><span class=\"line\">\te=*--s.top;<span class=\"comment\">//先减减 指向栈顶元素，再给e</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-得到栈顶元素\"><a class=\"anchor\" href=\"#3-得到栈顶元素\">#</a> <strong>3. 得到栈顶元素</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//仅仅只是得到栈顶元素，不修改指针</span></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">GetTop</span><span class=\"params\">(SqStack s,SElemType &amp;e)</span> <span class=\"comment\">//严蔚敏版59页有问题，应该用e去获得，函数返回bool类型去判断</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(s.top==s.base) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//栈空\t\t\t</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> e=*--s.top;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"完整可测试代码\"><a class=\"anchor\" href=\"#完整可测试代码\">#</a> <strong>完整可测试代码</strong></h3>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Status int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SElemType int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 100</span></span><br><span class=\"line\"><span class=\"comment\">//栈数据结构</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Stack</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tSElemType *base;<span class=\"comment\">//栈底指针 不变</span></span><br><span class=\"line\">\tSElemType *top;<span class=\"comment\">//栈顶指针 一直在栈顶元素上一个位置</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> stacksize;<span class=\"comment\">//栈可用的最大容量</span></span><br><span class=\"line\">&#125;SqStack;</span><br><span class=\"line\"><span class=\"comment\">//**************************************基本操作函数************************************//</span></span><br><span class=\"line\"><span class=\"comment\">//初始化函数</span></span><br><span class=\"line\">Status <span class=\"title function_\">InitStack</span><span class=\"params\">(SqStack &amp;s)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\ts.base=new SElemType[MaxSize];<span class=\"comment\">//动态分配最大容量</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!s.base)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;分配失败\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts.top=s.base;<span class=\"comment\">//栈顶指针与栈底相同 王道上top起初在base下面，感觉很别扭，top应该高于或等于base</span></span><br><span class=\"line\">\ts.stacksize=MaxSize;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//入栈</span></span><br><span class=\"line\">Status <span class=\"title function_\">Push</span><span class=\"params\">(SqStack &amp;s,SElemType e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(s.top-s.base==s.stacksize) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"comment\">//栈满</span></span><br><span class=\"line\">\t*(s.top++)=e;<span class=\"comment\">//先入栈，栈顶指针再上移 注意与王道上的不同，具体问题具体分析</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//出栈 用e返回值</span></span><br><span class=\"line\">Status <span class=\"title function_\">Pop</span><span class=\"params\">(SqStack &amp;s,SElemType &amp;e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(s.top==s.base) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"comment\">//栈空</span></span><br><span class=\"line\">\te=*--s.top;<span class=\"comment\">//先减减 指向栈顶元素，再给e</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//得到栈顶元素，不修改指针</span></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">GetTop</span><span class=\"params\">(SqStack s,SElemType &amp;e)</span> <span class=\"comment\">//严蔚敏版59页有问题，应该用e去获得，函数返回bool类型去判断</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(s.top==s.base) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//栈空\t\t\t</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> e=*--s.top;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//********************************功能实现函数**************************************//</span></span><br><span class=\"line\"><span class=\"comment\">//菜单</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">menu</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;********1.入栈      2.出栈*********\\n&quot;</span>);</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;********3.取栈顶    4.退出*********\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//入栈功能函数 调用Push函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PushToStack</span><span class=\"params\">(SqStack &amp;s)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;SElemType e;<span class=\"type\">int</span> flag;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入入栈元素个数(&gt;=1)：\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入第%d个元素的值:&quot;</span>,i+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;e);</span><br><span class=\"line\">\t flag=Push(s,e);</span><br><span class=\"line\">\t <span class=\"keyword\">if</span>(flag)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d已入栈\\n&quot;</span>,e);</span><br><span class=\"line\">\t <span class=\"keyword\">else</span> &#123;<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;栈已满！！！\\n&quot;</span>);<span class=\"keyword\">break</span>;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//出栈功能函数 调用Pop函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PopFromStack</span><span class=\"params\">(SqStack &amp;s)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;SElemType e;<span class=\"type\">int</span> flag;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入出栈元素个数(&gt;=1)：\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t flag=Pop(s,e);</span><br><span class=\"line\">\t <span class=\"keyword\">if</span>(flag)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d已出栈\\n&quot;</span>,e);</span><br><span class=\"line\">\t <span class=\"keyword\">else</span> &#123;<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;栈已空！！！\\n&quot;</span>);<span class=\"keyword\">break</span>;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//取栈顶功能函数 调用GetTop</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">GetTopOfStack</span><span class=\"params\">(SqStack &amp;s)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tSElemType e;<span class=\"type\">bool</span> flag; </span><br><span class=\"line\">\tflag=GetTop(s,e);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;栈顶元素为:%d\\n&quot;</span>,e);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;栈已空！！！\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//主函数</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> SqStack s;<span class=\"type\">int</span> choice;</span><br><span class=\"line\"> InitStack(s);</span><br><span class=\"line\"> <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  menu();</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入菜单序号：\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;choice);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(choice==<span class=\"number\">4</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(choice)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">1</span>:PushToStack(s);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">2</span>:PopFromStack(s);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">3</span>:GetTopOfStack(s);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;输入错误！！！\\n&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"-链栈-\"><a class=\"anchor\" href=\"#-链栈-\">#</a> <strong>- 链栈 -</strong></h2>\n<h3 id=\"一-链栈的数据结构\"><a class=\"anchor\" href=\"#一-链栈的数据结构\">#</a> <strong>一、链栈的数据结构</strong></h3>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">StackNode</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tSElemType data;<span class=\"comment\">//数据域</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">StackNode</span> *<span class=\"title\">next</span>;</span><span class=\"comment\">//指针域</span></span><br><span class=\"line\">&#125;StackNode,*LinkStack;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"二-链栈的操作\"><a class=\"anchor\" href=\"#二-链栈的操作\">#</a> <strong>二、链栈的操作</strong></h3>\n<hr />\n<h4 id=\"1初始化\"><a class=\"anchor\" href=\"#1初始化\">#</a> <strong>1. 初始化</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status <span class=\"title function_\">InitStack</span><span class=\"params\">(LinkStack &amp;S)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> S = <span class=\"literal\">NULL</span>;<span class=\"comment\">//生成空栈 以单链表表头为栈顶 注意，链栈没有像链表似的头结点</span></span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2入栈\"><a class=\"anchor\" href=\"#2入栈\">#</a> <strong>2. 入栈</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Status <span class=\"title function_\">Push</span><span class=\"params\">(LinkStack &amp;S,SElemType e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tStackNode *p;</span><br><span class=\"line\">\tp=new StackNode;<span class=\"comment\">//生成新节点</span></span><br><span class=\"line\">\tp-&gt;data=e;      <span class=\"comment\">//赋值</span></span><br><span class=\"line\">\tp-&gt;next=S;      <span class=\"comment\">//压入栈顶</span></span><br><span class=\"line\">\tS=p;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3出栈\"><a class=\"anchor\" href=\"#3出栈\">#</a> <strong>3. 出栈</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">Pop</span><span class=\"params\">(LinkStack &amp;S,SElemType &amp;e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tLinkStack p;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(S==<span class=\"literal\">NULL</span>)<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//栈空</span></span><br><span class=\"line\">\te=S-&gt;data;</span><br><span class=\"line\">\tp=S;</span><br><span class=\"line\">\tS=S-&gt;next;</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4取栈顶元素\"><a class=\"anchor\" href=\"#4取栈顶元素\">#</a> <strong>4. 取栈顶元素</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">GetTop</span><span class=\"params\">(LinkStack &amp;S,SElemType &amp;e)</span> <span class=\"comment\">//严蔚敏版（人民邮电出版社） 61页有误</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(S==<span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//栈顶为空</span></span><br><span class=\"line\">\te=S-&gt;data;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"完整可测试代码-2\"><a class=\"anchor\" href=\"#完整可测试代码-2\">#</a> <strong>完整可测试代码</strong></h4>\n<hr />\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Status int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SElemType int</span></span><br><span class=\"line\"><span class=\"comment\">//链栈结点数据结构</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">StackNode</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tSElemType data;<span class=\"comment\">//数据域</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">StackNode</span> *<span class=\"title\">next</span>;</span><span class=\"comment\">//指针域</span></span><br><span class=\"line\">&#125;StackNode,*LinkStack;</span><br><span class=\"line\"><span class=\"comment\">//**************************基本操作函数***************************//</span></span><br><span class=\"line\"><span class=\"comment\">//初始化函数</span></span><br><span class=\"line\">Status <span class=\"title function_\">InitStack</span><span class=\"params\">(LinkStack &amp;S)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> S = <span class=\"literal\">NULL</span>;<span class=\"comment\">//生成空栈 以单链表表头为栈顶 注意，链栈没有像链表似的头结点</span></span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//入栈函数 将e压入栈</span></span><br><span class=\"line\">Status <span class=\"title function_\">Push</span><span class=\"params\">(LinkStack &amp;S,SElemType e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tStackNode *p;</span><br><span class=\"line\">\tp=new StackNode;<span class=\"comment\">//生成新节点</span></span><br><span class=\"line\">\tp-&gt;data=e;      <span class=\"comment\">//赋值</span></span><br><span class=\"line\">\tp-&gt;next=S;      <span class=\"comment\">//压入栈顶</span></span><br><span class=\"line\">\tS=p;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//出栈函数  栈顶出栈用e返回 注意释放空间</span></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">Pop</span><span class=\"params\">(LinkStack &amp;S,SElemType &amp;e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tLinkStack p;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(S==<span class=\"literal\">NULL</span>)<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//栈空</span></span><br><span class=\"line\">\te=S-&gt;data;</span><br><span class=\"line\">\tp=S;</span><br><span class=\"line\">\tS=S-&gt;next;</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//取栈顶函数 用e返回</span></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">GetTop</span><span class=\"params\">(LinkStack &amp;S,SElemType &amp;e)</span> <span class=\"comment\">//严蔚敏版（人民邮电出版社） 61页有误</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(S==<span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//栈顶为空</span></span><br><span class=\"line\">\te=S-&gt;data;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//**************************功能实现函数***************************//</span></span><br><span class=\"line\"><span class=\"comment\">//菜单</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">menu</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;********1.入栈          2.出栈*********\\n&quot;</span>);</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;********3.取栈顶元素    4.退出*********\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//入栈功能函数 调用Push函数 </span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PushToStack</span><span class=\"params\">(LinkStack &amp;S)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;SElemType e;<span class=\"type\">int</span> flag;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入入栈元素个数(&gt;=1)：\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入第%d个元素的值:&quot;</span>,i+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;e);</span><br><span class=\"line\">\t flag=Push(S,e);</span><br><span class=\"line\">\t <span class=\"keyword\">if</span>(flag)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d已入栈\\n&quot;</span>,e);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//出栈功能函数 调用Pop函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PopFromStack</span><span class=\"params\">(LinkStack &amp;S)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;SElemType e;<span class=\"type\">int</span> flag;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入出栈元素个数(&gt;=1)：\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t flag=Pop(S,e);</span><br><span class=\"line\">\t <span class=\"keyword\">if</span>(flag)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d已出栈\\n&quot;</span>,e);</span><br><span class=\"line\">\t <span class=\"keyword\">else</span> &#123;<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;栈已空！！！\\n&quot;</span>);<span class=\"keyword\">break</span>;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//取栈顶功能函数 调用GetTop函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">GetTopOfStack</span><span class=\"params\">(LinkStack S)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tSElemType e;<span class=\"type\">bool</span> flag; </span><br><span class=\"line\">\tflag=GetTop(S,e);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;栈顶元素为:%d\\n&quot;</span>,e);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;栈已空！！！\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//主函数</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> LinkStack S;<span class=\"type\">int</span> choice;</span><br><span class=\"line\"> InitStack(S);</span><br><span class=\"line\"> <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  menu();</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入菜单序号：\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;choice);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(choice==<span class=\"number\">4</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(choice)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">1</span>:PushToStack(S);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">2</span>:PopFromStack(S);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">3</span>:GetTopOfStack(S);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;输入错误！！！\\n&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://dragonftop.github.io/2025/04/04/%E6%95%99%E6%9D%90%E9%85%8D%E5%A5%97%E7%BD%91%E7%AB%99/",
            "url": "https://dragonftop.github.io/2025/04/04/%E6%95%99%E6%9D%90%E9%85%8D%E5%A5%97%E7%BD%91%E7%AB%99/",
            "title": "数据结构与算法",
            "date_published": "2025-04-04T12:43:56.900Z",
            "content_html": "<h1 id=\"数据结构学习资源\"><a class=\"anchor\" href=\"#数据结构学习资源\">#</a> <em><strong>数据结构学习资源</strong></em></h1>\n<h3 id=\"数据结构\"><a class=\"anchor\" href=\"#数据结构\">#</a> 数据结构</h3>\n<h4 id=\"1数据结构c语言版全书知识梳理\"><a class=\"anchor\" href=\"#1数据结构c语言版全书知识梳理\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9pYW1senkuYmxvZy5jc2RuLm5ldC9hcnRpY2xlL2RldGFpbHMvODY1NjA1NzA/ZnJvbXNoYXJlPWJsb2dkZXRhaWwmYW1wO3NoYXJldHlwZT1ibG9nZGV0YWlsJmFtcDtzaGFyZXJJZD04NjU2MDU3MCZhbXA7c2hhcmVyZWZlcj1QQyZhbXA7c2hhcmVzb3VyY2U9MjQwMl84ODE4MDM4MiZhbXA7c2hhcmVmcm9tPWZyb21fbGluaw==\">1.《数据结构》C 语言版全书知识梳理</span></h4>\n<h4 id=\"2数据结构严蔚敏版与算法的实现含全部代码\"><a class=\"anchor\" href=\"#2数据结构严蔚敏版与算法的实现含全部代码\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xhZHlfa2lsbGVyOS9hcnRpY2xlL2RldGFpbHMvODI2OTU4OTU/ZnJvbXNoYXJlPWJsb2dkZXRhaWwmYW1wO3NoYXJldHlwZT1ibG9nZGV0YWlsJmFtcDtzaGFyZXJJZD04MjY5NTg5NSZhbXA7c2hhcmVyZWZlcj1QQyZhbXA7c2hhcmVzb3VyY2U9MjQwMl84ODE4MDM4MiZhbXA7c2hhcmVmcm9tPWZyb21fbGluaw==\">2. 数据结构（严蔚敏版）与算法的实现（含全部代码</span></h4>\n<h4 id=\"3数据结构c语言严蔚敏版第二版超详细笔记附带课后习题\"><a class=\"anchor\" href=\"#3数据结构c语言严蔚敏版第二版超详细笔记附带课后习题\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nob25neWFuZ18vYXJ0aWNsZS9kZXRhaWxzLzEwOTU0NDcxOT9mcm9tc2hhcmU9YmxvZ2RldGFpbCZhbXA7c2hhcmV0eXBlPWJsb2dkZXRhaWwmYW1wO3NoYXJlcklkPTEwOTU0NDcxOSZhbXA7c2hhcmVyZWZlcj1QQyZhbXA7c2hhcmVzb3VyY2U9MjQwMl84ODE4MDM4MiZhbXA7c2hhcmVmcm9tPWZyb21fbGluaw==\">3. 数据结构 C 语言严蔚敏版 (第二版) 超详细笔记附带课后习题</span></h4>\n",
            "tags": []
        }
    ]
}